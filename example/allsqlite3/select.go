// Autogenerated by github.com/posener/orm; DO NOT EDIT
package allsqlite3

import (
	"context"
	"database/sql/driver"
	"fmt"
	"github.com/posener/orm/common"
	"github.com/posener/orm/row"
	"reflect"
	"time"

	"github.com/posener/orm/example"
)

type AllCount struct {
	example.All
	Count int64
}

// Select is the struct that holds the SELECT data
type Select struct {
	internal common.Select
	orm      *ORM
	columns  columns
}

// Where applies where conditions on the query
func (s *Select) Where(where common.Where) *Select {
	s.internal.Where = where
	return s
}

// Limit applies rows limit on the query response
func (s *Select) Limit(limit int64) *Select {
	s.internal.Page.Limit = limit
	return s
}

// Page applies rows offset and limit on the query response
func (s *Select) Page(offset, limit int64) *Select {
	s.internal.Page.Offset = offset
	s.internal.Page.Limit = limit
	return s
}

// Query the database
func (s *Select) Query(ctx context.Context) ([]example.All, error) {
	rows, err := s.query(ctx)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// extract rows to structures
	var all []example.All
	for rows.Next() {
		// check context cancellation
		if err := ctx.Err(); err != nil {
			return nil, err
		}
		item, err := s.scan(row.Values(*rows))
		if err != nil {
			return nil, err
		}
		all = append(all, item.All)
	}
	return all, rows.Err()
}

// Count add a count column to the query
func (s *Select) Count(ctx context.Context) ([]AllCount, error) {
	s.columns.count = true
	rows, err := s.query(ctx)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// extract rows to structures
	var all []AllCount
	for rows.Next() {
		// check context cancellation
		if err := ctx.Err(); err != nil {
			return nil, err
		}
		item, err := s.scan(row.Values(*rows))
		if err != nil {
			return nil, err
		}
		all = append(all, *item)
	}
	return all, rows.Err()
}

// SelectAuto adds Auto to the selected column of a query
func (s *Select) SelectAuto() *Select {
	s.columns.SelectAuto = true
	return s
}

// OrderByAuto set order to the query results according to column auto
func (s *Select) OrderByAuto(dir common.OrderDir) *Select {
	s.internal.Orders.Add("auto", dir)
	return s
}

// GroupByAuto make the query group by column auto
func (s *Select) GroupByAuto() *Select {
	s.internal.Groups.Add("auto")
	return s
}

// SelectNotNil adds NotNil to the selected column of a query
func (s *Select) SelectNotNil() *Select {
	s.columns.SelectNotNil = true
	return s
}

// OrderByNotNil set order to the query results according to column notnil
func (s *Select) OrderByNotNil(dir common.OrderDir) *Select {
	s.internal.Orders.Add("notnil", dir)
	return s
}

// GroupByNotNil make the query group by column notnil
func (s *Select) GroupByNotNil() *Select {
	s.internal.Groups.Add("notnil")
	return s
}

// SelectInt adds Int to the selected column of a query
func (s *Select) SelectInt() *Select {
	s.columns.SelectInt = true
	return s
}

// OrderByInt set order to the query results according to column int
func (s *Select) OrderByInt(dir common.OrderDir) *Select {
	s.internal.Orders.Add("int", dir)
	return s
}

// GroupByInt make the query group by column int
func (s *Select) GroupByInt() *Select {
	s.internal.Groups.Add("int")
	return s
}

// SelectInt8 adds Int8 to the selected column of a query
func (s *Select) SelectInt8() *Select {
	s.columns.SelectInt8 = true
	return s
}

// OrderByInt8 set order to the query results according to column int8
func (s *Select) OrderByInt8(dir common.OrderDir) *Select {
	s.internal.Orders.Add("int8", dir)
	return s
}

// GroupByInt8 make the query group by column int8
func (s *Select) GroupByInt8() *Select {
	s.internal.Groups.Add("int8")
	return s
}

// SelectInt16 adds Int16 to the selected column of a query
func (s *Select) SelectInt16() *Select {
	s.columns.SelectInt16 = true
	return s
}

// OrderByInt16 set order to the query results according to column int16
func (s *Select) OrderByInt16(dir common.OrderDir) *Select {
	s.internal.Orders.Add("int16", dir)
	return s
}

// GroupByInt16 make the query group by column int16
func (s *Select) GroupByInt16() *Select {
	s.internal.Groups.Add("int16")
	return s
}

// SelectInt32 adds Int32 to the selected column of a query
func (s *Select) SelectInt32() *Select {
	s.columns.SelectInt32 = true
	return s
}

// OrderByInt32 set order to the query results according to column int32
func (s *Select) OrderByInt32(dir common.OrderDir) *Select {
	s.internal.Orders.Add("int32", dir)
	return s
}

// GroupByInt32 make the query group by column int32
func (s *Select) GroupByInt32() *Select {
	s.internal.Groups.Add("int32")
	return s
}

// SelectInt64 adds Int64 to the selected column of a query
func (s *Select) SelectInt64() *Select {
	s.columns.SelectInt64 = true
	return s
}

// OrderByInt64 set order to the query results according to column int64
func (s *Select) OrderByInt64(dir common.OrderDir) *Select {
	s.internal.Orders.Add("int64", dir)
	return s
}

// GroupByInt64 make the query group by column int64
func (s *Select) GroupByInt64() *Select {
	s.internal.Groups.Add("int64")
	return s
}

// SelectUInt adds UInt to the selected column of a query
func (s *Select) SelectUInt() *Select {
	s.columns.SelectUInt = true
	return s
}

// OrderByUInt set order to the query results according to column uint
func (s *Select) OrderByUInt(dir common.OrderDir) *Select {
	s.internal.Orders.Add("uint", dir)
	return s
}

// GroupByUInt make the query group by column uint
func (s *Select) GroupByUInt() *Select {
	s.internal.Groups.Add("uint")
	return s
}

// SelectUInt8 adds UInt8 to the selected column of a query
func (s *Select) SelectUInt8() *Select {
	s.columns.SelectUInt8 = true
	return s
}

// OrderByUInt8 set order to the query results according to column uint8
func (s *Select) OrderByUInt8(dir common.OrderDir) *Select {
	s.internal.Orders.Add("uint8", dir)
	return s
}

// GroupByUInt8 make the query group by column uint8
func (s *Select) GroupByUInt8() *Select {
	s.internal.Groups.Add("uint8")
	return s
}

// SelectUInt16 adds UInt16 to the selected column of a query
func (s *Select) SelectUInt16() *Select {
	s.columns.SelectUInt16 = true
	return s
}

// OrderByUInt16 set order to the query results according to column uint16
func (s *Select) OrderByUInt16(dir common.OrderDir) *Select {
	s.internal.Orders.Add("uint16", dir)
	return s
}

// GroupByUInt16 make the query group by column uint16
func (s *Select) GroupByUInt16() *Select {
	s.internal.Groups.Add("uint16")
	return s
}

// SelectUInt32 adds UInt32 to the selected column of a query
func (s *Select) SelectUInt32() *Select {
	s.columns.SelectUInt32 = true
	return s
}

// OrderByUInt32 set order to the query results according to column uint32
func (s *Select) OrderByUInt32(dir common.OrderDir) *Select {
	s.internal.Orders.Add("uint32", dir)
	return s
}

// GroupByUInt32 make the query group by column uint32
func (s *Select) GroupByUInt32() *Select {
	s.internal.Groups.Add("uint32")
	return s
}

// SelectUInt64 adds UInt64 to the selected column of a query
func (s *Select) SelectUInt64() *Select {
	s.columns.SelectUInt64 = true
	return s
}

// OrderByUInt64 set order to the query results according to column uint64
func (s *Select) OrderByUInt64(dir common.OrderDir) *Select {
	s.internal.Orders.Add("uint64", dir)
	return s
}

// GroupByUInt64 make the query group by column uint64
func (s *Select) GroupByUInt64() *Select {
	s.internal.Groups.Add("uint64")
	return s
}

// SelectTime adds Time to the selected column of a query
func (s *Select) SelectTime() *Select {
	s.columns.SelectTime = true
	return s
}

// OrderByTime set order to the query results according to column time
func (s *Select) OrderByTime(dir common.OrderDir) *Select {
	s.internal.Orders.Add("time", dir)
	return s
}

// GroupByTime make the query group by column time
func (s *Select) GroupByTime() *Select {
	s.internal.Groups.Add("time")
	return s
}

// SelectVarCharString adds VarCharString to the selected column of a query
func (s *Select) SelectVarCharString() *Select {
	s.columns.SelectVarCharString = true
	return s
}

// OrderByVarCharString set order to the query results according to column varcharstring
func (s *Select) OrderByVarCharString(dir common.OrderDir) *Select {
	s.internal.Orders.Add("varcharstring", dir)
	return s
}

// GroupByVarCharString make the query group by column varcharstring
func (s *Select) GroupByVarCharString() *Select {
	s.internal.Groups.Add("varcharstring")
	return s
}

// SelectVarCharByte adds VarCharByte to the selected column of a query
func (s *Select) SelectVarCharByte() *Select {
	s.columns.SelectVarCharByte = true
	return s
}

// OrderByVarCharByte set order to the query results according to column varcharbyte
func (s *Select) OrderByVarCharByte(dir common.OrderDir) *Select {
	s.internal.Orders.Add("varcharbyte", dir)
	return s
}

// GroupByVarCharByte make the query group by column varcharbyte
func (s *Select) GroupByVarCharByte() *Select {
	s.internal.Groups.Add("varcharbyte")
	return s
}

// SelectString adds String to the selected column of a query
func (s *Select) SelectString() *Select {
	s.columns.SelectString = true
	return s
}

// OrderByString set order to the query results according to column string
func (s *Select) OrderByString(dir common.OrderDir) *Select {
	s.internal.Orders.Add("string", dir)
	return s
}

// GroupByString make the query group by column string
func (s *Select) GroupByString() *Select {
	s.internal.Groups.Add("string")
	return s
}

// SelectBytes adds Bytes to the selected column of a query
func (s *Select) SelectBytes() *Select {
	s.columns.SelectBytes = true
	return s
}

// OrderByBytes set order to the query results according to column bytes
func (s *Select) OrderByBytes(dir common.OrderDir) *Select {
	s.internal.Orders.Add("bytes", dir)
	return s
}

// GroupByBytes make the query group by column bytes
func (s *Select) GroupByBytes() *Select {
	s.internal.Groups.Add("bytes")
	return s
}

// SelectBool adds Bool to the selected column of a query
func (s *Select) SelectBool() *Select {
	s.columns.SelectBool = true
	return s
}

// OrderByBool set order to the query results according to column bool
func (s *Select) OrderByBool(dir common.OrderDir) *Select {
	s.internal.Orders.Add("bool", dir)
	return s
}

// GroupByBool make the query group by column bool
func (s *Select) GroupByBool() *Select {
	s.internal.Groups.Add("bool")
	return s
}

// SelectPInt adds PInt to the selected column of a query
func (s *Select) SelectPInt() *Select {
	s.columns.SelectPInt = true
	return s
}

// OrderByPInt set order to the query results according to column pint
func (s *Select) OrderByPInt(dir common.OrderDir) *Select {
	s.internal.Orders.Add("pint", dir)
	return s
}

// GroupByPInt make the query group by column pint
func (s *Select) GroupByPInt() *Select {
	s.internal.Groups.Add("pint")
	return s
}

// SelectPInt8 adds PInt8 to the selected column of a query
func (s *Select) SelectPInt8() *Select {
	s.columns.SelectPInt8 = true
	return s
}

// OrderByPInt8 set order to the query results according to column pint8
func (s *Select) OrderByPInt8(dir common.OrderDir) *Select {
	s.internal.Orders.Add("pint8", dir)
	return s
}

// GroupByPInt8 make the query group by column pint8
func (s *Select) GroupByPInt8() *Select {
	s.internal.Groups.Add("pint8")
	return s
}

// SelectPInt16 adds PInt16 to the selected column of a query
func (s *Select) SelectPInt16() *Select {
	s.columns.SelectPInt16 = true
	return s
}

// OrderByPInt16 set order to the query results according to column pint16
func (s *Select) OrderByPInt16(dir common.OrderDir) *Select {
	s.internal.Orders.Add("pint16", dir)
	return s
}

// GroupByPInt16 make the query group by column pint16
func (s *Select) GroupByPInt16() *Select {
	s.internal.Groups.Add("pint16")
	return s
}

// SelectPInt32 adds PInt32 to the selected column of a query
func (s *Select) SelectPInt32() *Select {
	s.columns.SelectPInt32 = true
	return s
}

// OrderByPInt32 set order to the query results according to column pint32
func (s *Select) OrderByPInt32(dir common.OrderDir) *Select {
	s.internal.Orders.Add("pint32", dir)
	return s
}

// GroupByPInt32 make the query group by column pint32
func (s *Select) GroupByPInt32() *Select {
	s.internal.Groups.Add("pint32")
	return s
}

// SelectPInt64 adds PInt64 to the selected column of a query
func (s *Select) SelectPInt64() *Select {
	s.columns.SelectPInt64 = true
	return s
}

// OrderByPInt64 set order to the query results according to column pint64
func (s *Select) OrderByPInt64(dir common.OrderDir) *Select {
	s.internal.Orders.Add("pint64", dir)
	return s
}

// GroupByPInt64 make the query group by column pint64
func (s *Select) GroupByPInt64() *Select {
	s.internal.Groups.Add("pint64")
	return s
}

// SelectPUInt adds PUInt to the selected column of a query
func (s *Select) SelectPUInt() *Select {
	s.columns.SelectPUInt = true
	return s
}

// OrderByPUInt set order to the query results according to column puint
func (s *Select) OrderByPUInt(dir common.OrderDir) *Select {
	s.internal.Orders.Add("puint", dir)
	return s
}

// GroupByPUInt make the query group by column puint
func (s *Select) GroupByPUInt() *Select {
	s.internal.Groups.Add("puint")
	return s
}

// SelectPUInt8 adds PUInt8 to the selected column of a query
func (s *Select) SelectPUInt8() *Select {
	s.columns.SelectPUInt8 = true
	return s
}

// OrderByPUInt8 set order to the query results according to column puint8
func (s *Select) OrderByPUInt8(dir common.OrderDir) *Select {
	s.internal.Orders.Add("puint8", dir)
	return s
}

// GroupByPUInt8 make the query group by column puint8
func (s *Select) GroupByPUInt8() *Select {
	s.internal.Groups.Add("puint8")
	return s
}

// SelectPUInt16 adds PUInt16 to the selected column of a query
func (s *Select) SelectPUInt16() *Select {
	s.columns.SelectPUInt16 = true
	return s
}

// OrderByPUInt16 set order to the query results according to column puint16
func (s *Select) OrderByPUInt16(dir common.OrderDir) *Select {
	s.internal.Orders.Add("puint16", dir)
	return s
}

// GroupByPUInt16 make the query group by column puint16
func (s *Select) GroupByPUInt16() *Select {
	s.internal.Groups.Add("puint16")
	return s
}

// SelectPUInt32 adds PUInt32 to the selected column of a query
func (s *Select) SelectPUInt32() *Select {
	s.columns.SelectPUInt32 = true
	return s
}

// OrderByPUInt32 set order to the query results according to column puint32
func (s *Select) OrderByPUInt32(dir common.OrderDir) *Select {
	s.internal.Orders.Add("puint32", dir)
	return s
}

// GroupByPUInt32 make the query group by column puint32
func (s *Select) GroupByPUInt32() *Select {
	s.internal.Groups.Add("puint32")
	return s
}

// SelectPUInt64 adds PUInt64 to the selected column of a query
func (s *Select) SelectPUInt64() *Select {
	s.columns.SelectPUInt64 = true
	return s
}

// OrderByPUInt64 set order to the query results according to column puint64
func (s *Select) OrderByPUInt64(dir common.OrderDir) *Select {
	s.internal.Orders.Add("puint64", dir)
	return s
}

// GroupByPUInt64 make the query group by column puint64
func (s *Select) GroupByPUInt64() *Select {
	s.internal.Groups.Add("puint64")
	return s
}

// SelectPTime adds PTime to the selected column of a query
func (s *Select) SelectPTime() *Select {
	s.columns.SelectPTime = true
	return s
}

// OrderByPTime set order to the query results according to column ptime
func (s *Select) OrderByPTime(dir common.OrderDir) *Select {
	s.internal.Orders.Add("ptime", dir)
	return s
}

// GroupByPTime make the query group by column ptime
func (s *Select) GroupByPTime() *Select {
	s.internal.Groups.Add("ptime")
	return s
}

// SelectPVarCharString adds PVarCharString to the selected column of a query
func (s *Select) SelectPVarCharString() *Select {
	s.columns.SelectPVarCharString = true
	return s
}

// OrderByPVarCharString set order to the query results according to column pvarcharstring
func (s *Select) OrderByPVarCharString(dir common.OrderDir) *Select {
	s.internal.Orders.Add("pvarcharstring", dir)
	return s
}

// GroupByPVarCharString make the query group by column pvarcharstring
func (s *Select) GroupByPVarCharString() *Select {
	s.internal.Groups.Add("pvarcharstring")
	return s
}

// SelectPVarCharByte adds PVarCharByte to the selected column of a query
func (s *Select) SelectPVarCharByte() *Select {
	s.columns.SelectPVarCharByte = true
	return s
}

// OrderByPVarCharByte set order to the query results according to column pvarcharbyte
func (s *Select) OrderByPVarCharByte(dir common.OrderDir) *Select {
	s.internal.Orders.Add("pvarcharbyte", dir)
	return s
}

// GroupByPVarCharByte make the query group by column pvarcharbyte
func (s *Select) GroupByPVarCharByte() *Select {
	s.internal.Groups.Add("pvarcharbyte")
	return s
}

// SelectPString adds PString to the selected column of a query
func (s *Select) SelectPString() *Select {
	s.columns.SelectPString = true
	return s
}

// OrderByPString set order to the query results according to column pstring
func (s *Select) OrderByPString(dir common.OrderDir) *Select {
	s.internal.Orders.Add("pstring", dir)
	return s
}

// GroupByPString make the query group by column pstring
func (s *Select) GroupByPString() *Select {
	s.internal.Groups.Add("pstring")
	return s
}

// SelectPBytes adds PBytes to the selected column of a query
func (s *Select) SelectPBytes() *Select {
	s.columns.SelectPBytes = true
	return s
}

// OrderByPBytes set order to the query results according to column pbytes
func (s *Select) OrderByPBytes(dir common.OrderDir) *Select {
	s.internal.Orders.Add("pbytes", dir)
	return s
}

// GroupByPBytes make the query group by column pbytes
func (s *Select) GroupByPBytes() *Select {
	s.internal.Groups.Add("pbytes")
	return s
}

// SelectPBool adds PBool to the selected column of a query
func (s *Select) SelectPBool() *Select {
	s.columns.SelectPBool = true
	return s
}

// OrderByPBool set order to the query results according to column pbool
func (s *Select) OrderByPBool(dir common.OrderDir) *Select {
	s.internal.Orders.Add("pbool", dir)
	return s
}

// GroupByPBool make the query group by column pbool
func (s *Select) GroupByPBool() *Select {
	s.internal.Groups.Add("pbool")
	return s
}

// SelectSelect adds Select to the selected column of a query
func (s *Select) SelectSelect() *Select {
	s.columns.SelectSelect = true
	return s
}

// OrderBySelect set order to the query results according to column select
func (s *Select) OrderBySelect(dir common.OrderDir) *Select {
	s.internal.Orders.Add("select", dir)
	return s
}

// GroupBySelect make the query group by column select
func (s *Select) GroupBySelect() *Select {
	s.internal.Groups.Add("select")
	return s
}

// scanArgs are list of fields to be given to the sql Scan command
func (s *Select) scan(vals []driver.Value) (*AllCount, error) {
	var (
		row AllCount
		all = s.columns.selectAll()
		i   = 0
	)
	if all || s.columns.SelectAuto {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting Auto: column %d with value %v (type %v) to int", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.Auto = (int)(val)
		}
		i++
	}
	if all || s.columns.SelectNotNil {
		if vals[i] != nil {
			val, ok := vals[i].([]byte)
			if !ok {
				return nil, fmt.Errorf("converting NotNil: column %d with value %v (type %v) to string", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.NotNil = (string)(val)
		}
		i++
	}
	if all || s.columns.SelectInt {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting Int: column %d with value %v (type %v) to int", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.Int = (int)(val)
		}
		i++
	}
	if all || s.columns.SelectInt8 {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting Int8: column %d with value %v (type %v) to int8", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.Int8 = (int8)(val)
		}
		i++
	}
	if all || s.columns.SelectInt16 {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting Int16: column %d with value %v (type %v) to int16", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.Int16 = (int16)(val)
		}
		i++
	}
	if all || s.columns.SelectInt32 {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting Int32: column %d with value %v (type %v) to int32", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.Int32 = (int32)(val)
		}
		i++
	}
	if all || s.columns.SelectInt64 {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting Int64: column %d with value %v (type %v) to int64", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.Int64 = val
		}
		i++
	}
	if all || s.columns.SelectUInt {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting UInt: column %d with value %v (type %v) to uint", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.UInt = (uint)(val)
		}
		i++
	}
	if all || s.columns.SelectUInt8 {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting UInt8: column %d with value %v (type %v) to uint8", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.UInt8 = (uint8)(val)
		}
		i++
	}
	if all || s.columns.SelectUInt16 {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting UInt16: column %d with value %v (type %v) to uint16", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.UInt16 = (uint16)(val)
		}
		i++
	}
	if all || s.columns.SelectUInt32 {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting UInt32: column %d with value %v (type %v) to uint32", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.UInt32 = (uint32)(val)
		}
		i++
	}
	if all || s.columns.SelectUInt64 {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting UInt64: column %d with value %v (type %v) to uint64", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.UInt64 = (uint64)(val)
		}
		i++
	}
	if all || s.columns.SelectTime {
		if vals[i] != nil {
			val, ok := vals[i].(time.Time)
			if !ok {
				return nil, fmt.Errorf("converting Time: column %d with value %v (type %v) to time.Time", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.Time = val
		}
		i++
	}
	if all || s.columns.SelectVarCharString {
		if vals[i] != nil {
			val, ok := vals[i].([]byte)
			if !ok {
				return nil, fmt.Errorf("converting VarCharString: column %d with value %v (type %v) to string", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.VarCharString = (string)(val)
		}
		i++
	}
	if all || s.columns.SelectVarCharByte {
		if vals[i] != nil {
			val, ok := vals[i].([]byte)
			if !ok {
				return nil, fmt.Errorf("converting VarCharByte: column %d with value %v (type %v) to []byte", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.VarCharByte = val
		}
		i++
	}
	if all || s.columns.SelectString {
		if vals[i] != nil {
			val, ok := vals[i].([]byte)
			if !ok {
				return nil, fmt.Errorf("converting String: column %d with value %v (type %v) to string", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.String = (string)(val)
		}
		i++
	}
	if all || s.columns.SelectBytes {
		if vals[i] != nil {
			val, ok := vals[i].([]byte)
			if !ok {
				return nil, fmt.Errorf("converting Bytes: column %d with value %v (type %v) to []byte", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.Bytes = val
		}
		i++
	}
	if all || s.columns.SelectBool {
		if vals[i] != nil {
			val, ok := vals[i].(bool)
			if !ok {
				return nil, fmt.Errorf("converting Bool: column %d with value %v (type %v) to bool", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.Bool = val
		}
		i++
	}
	if all || s.columns.SelectPInt {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting PInt: column %d with value %v (type %v) to *int", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			tmp := int(val)
			row.PInt = &tmp
		}
		i++
	}
	if all || s.columns.SelectPInt8 {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting PInt8: column %d with value %v (type %v) to *int8", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			tmp := int8(val)
			row.PInt8 = &tmp
		}
		i++
	}
	if all || s.columns.SelectPInt16 {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting PInt16: column %d with value %v (type %v) to *int16", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			tmp := int16(val)
			row.PInt16 = &tmp
		}
		i++
	}
	if all || s.columns.SelectPInt32 {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting PInt32: column %d with value %v (type %v) to *int32", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			tmp := int32(val)
			row.PInt32 = &tmp
		}
		i++
	}
	if all || s.columns.SelectPInt64 {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting PInt64: column %d with value %v (type %v) to *int64", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			tmp := int64(val)
			row.PInt64 = &tmp
		}
		i++
	}
	if all || s.columns.SelectPUInt {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting PUInt: column %d with value %v (type %v) to *uint", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			tmp := uint(val)
			row.PUInt = &tmp
		}
		i++
	}
	if all || s.columns.SelectPUInt8 {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting PUInt8: column %d with value %v (type %v) to *uint8", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			tmp := uint8(val)
			row.PUInt8 = &tmp
		}
		i++
	}
	if all || s.columns.SelectPUInt16 {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting PUInt16: column %d with value %v (type %v) to *uint16", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			tmp := uint16(val)
			row.PUInt16 = &tmp
		}
		i++
	}
	if all || s.columns.SelectPUInt32 {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting PUInt32: column %d with value %v (type %v) to *uint32", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			tmp := uint32(val)
			row.PUInt32 = &tmp
		}
		i++
	}
	if all || s.columns.SelectPUInt64 {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting PUInt64: column %d with value %v (type %v) to *uint64", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			tmp := uint64(val)
			row.PUInt64 = &tmp
		}
		i++
	}
	if all || s.columns.SelectPTime {
		if vals[i] != nil {
			val, ok := vals[i].(time.Time)
			if !ok {
				return nil, fmt.Errorf("converting PTime: column %d with value %v (type %v) to *time.Time", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			tmp := time.Time(val)
			row.PTime = &tmp
		}
		i++
	}
	if all || s.columns.SelectPVarCharString {
		if vals[i] != nil {
			val, ok := vals[i].([]byte)
			if !ok {
				return nil, fmt.Errorf("converting PVarCharString: column %d with value %v (type %v) to *string", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			tmp := string(val)
			row.PVarCharString = &tmp
		}
		i++
	}
	if all || s.columns.SelectPVarCharByte {
		if vals[i] != nil {
			val, ok := vals[i].([]byte)
			if !ok {
				return nil, fmt.Errorf("converting PVarCharByte: column %d with value %v (type %v) to *[]byte", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			tmp := []byte(val)
			row.PVarCharByte = &tmp
		}
		i++
	}
	if all || s.columns.SelectPString {
		if vals[i] != nil {
			val, ok := vals[i].([]byte)
			if !ok {
				return nil, fmt.Errorf("converting PString: column %d with value %v (type %v) to *string", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			tmp := string(val)
			row.PString = &tmp
		}
		i++
	}
	if all || s.columns.SelectPBytes {
		if vals[i] != nil {
			val, ok := vals[i].([]byte)
			if !ok {
				return nil, fmt.Errorf("converting PBytes: column %d with value %v (type %v) to *[]byte", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			tmp := []byte(val)
			row.PBytes = &tmp
		}
		i++
	}
	if all || s.columns.SelectPBool {
		if vals[i] != nil {
			val, ok := vals[i].(bool)
			if !ok {
				return nil, fmt.Errorf("converting PBool: column %d with value %v (type %v) to *bool", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			tmp := bool(val)
			row.PBool = &tmp
		}
		i++
	}
	if all || s.columns.SelectSelect {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting Select: column %d with value %v (type %v) to int", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.Select = (int)(val)
		}
		i++
	}
	if s.columns.count {
		var ok bool
		row.Count, ok = vals[i].(int64)
		if !ok {
			return nil, fmt.Errorf("converting COUNT(*): column %d with value %v (type %v) to int64", i, vals[i], reflect.TypeOf(vals[i]).Name())
		}
	}
	return &row, nil
}
