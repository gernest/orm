// Autogenerated by github.com/posener/orm; DO NOT EDIT
package allsqlite3

import (
	"database/sql/driver"
	"fmt"
	"github.com/posener/orm/common"
	"github.com/posener/orm/row"
	"time"

	"github.com/posener/orm/example"
)

type AllCount struct {
	example.All
	Count int64
}

// Select is the struct that holds the SELECT data
type Select struct {
	common.Select
	orm *ORM
	columns
}

// Where applies where conditions on the query
func (s *Select) Where(where common.Where) *Select {
	s.Select.Where = where
	return s
}

// Limit applies rows limit on the query response
func (s *Select) Limit(limit int64) *Select {
	s.Select.Page.Limit = limit
	return s
}

// Page applies rows offset and limit on the query response
func (s *Select) Page(offset, limit int64) *Select {
	s.Select.Page.Offset = offset
	s.Select.Page.Limit = limit
	return s
}

// Query the database
func (s *Select) Query() ([]example.All, error) {
	rows, err := s.query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// extract rows to structures
	var all []example.All
	for rows.Next() {
		item, err := s.scan(row.Values(*rows))
		if err != nil {
			return nil, err
		}
		all = append(all, item.All)
	}
	return all, rows.Err()
}

// Count add a count column to the query
func (s *Select) Count() ([]AllCount, error) {
	s.columns.count = true
	rows, err := s.query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// extract rows to structures
	var all []AllCount
	for rows.Next() {
		item, err := s.scan(row.Values(*rows))
		if err != nil {
			return nil, err
		}
		all = append(all, *item)
	}
	return all, rows.Err()
}

// SelectInt adds Int to the selected column of a query
func (s *Select) SelectInt() *Select {
	s.columns.SelectInt = true
	return s
}

// OrderByInt set order to the query results according to column int
func (s *Select) OrderByInt(dir common.OrderDir) *Select {
	s.Orders.Add("int", dir)
	return s
}

// GroupByInt make the query group by column int
func (s *Select) GroupByInt() *Select {
	s.Groups.Add("int")
	return s
}

// SelectString adds String to the selected column of a query
func (s *Select) SelectString() *Select {
	s.columns.SelectString = true
	return s
}

// OrderByString set order to the query results according to column string
func (s *Select) OrderByString(dir common.OrderDir) *Select {
	s.Orders.Add("string", dir)
	return s
}

// GroupByString make the query group by column string
func (s *Select) GroupByString() *Select {
	s.Groups.Add("string")
	return s
}

// SelectBool adds Bool to the selected column of a query
func (s *Select) SelectBool() *Select {
	s.columns.SelectBool = true
	return s
}

// OrderByBool set order to the query results according to column bool
func (s *Select) OrderByBool(dir common.OrderDir) *Select {
	s.Orders.Add("bool", dir)
	return s
}

// GroupByBool make the query group by column bool
func (s *Select) GroupByBool() *Select {
	s.Groups.Add("bool")
	return s
}

// SelectTime adds Time to the selected column of a query
func (s *Select) SelectTime() *Select {
	s.columns.SelectTime = true
	return s
}

// OrderByTime set order to the query results according to column time
func (s *Select) OrderByTime(dir common.OrderDir) *Select {
	s.Orders.Add("time", dir)
	return s
}

// GroupByTime make the query group by column time
func (s *Select) GroupByTime() *Select {
	s.Groups.Add("time")
	return s
}

// SelectSelect adds Select to the selected column of a query
func (s *Select) SelectSelect() *Select {
	s.columns.SelectSelect = true
	return s
}

// OrderBySelect set order to the query results according to column select
func (s *Select) OrderBySelect(dir common.OrderDir) *Select {
	s.Orders.Add("select", dir)
	return s
}

// GroupBySelect make the query group by column select
func (s *Select) GroupBySelect() *Select {
	s.Groups.Add("select")
	return s
}

// scanArgs are list of fields to be given to the sql Scan command
func (s *Select) scan(vals []driver.Value) (*AllCount, error) {
	var (
		row AllCount
		all = s.columns.selectAll()
		i   = 0
	)
	if all || s.columns.SelectInt {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting Int: column %d with value %v to int", i, vals[i])
			}
			row.Int = int(val)
		}
		i++
	}
	if all || s.columns.SelectString {
		if vals[i] != nil {
			val, ok := vals[i].([]byte)
			if !ok {
				return nil, fmt.Errorf("converting String: column %d with value %v to string", i, vals[i])
			}
			row.String = string(val)
		}
		i++
	}
	if all || s.columns.SelectBool {
		if vals[i] != nil {
			val, ok := vals[i].(bool)
			if !ok {
				return nil, fmt.Errorf("converting Bool: column %d with value %v to bool", i, vals[i])
			}
			row.Bool = bool(val)
		}
		i++
	}
	if all || s.columns.SelectTime {
		if vals[i] != nil {
			val, ok := vals[i].(time.Time)
			if !ok {
				return nil, fmt.Errorf("converting Time: column %d with value %v to time.Time", i, vals[i])
			}
			row.Time = time.Time(val)
		}
		i++
	}
	if all || s.columns.SelectSelect {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting Select: column %d with value %v to int", i, vals[i])
			}
			row.Select = int(val)
		}
		i++
	}
	if s.columns.count {
		var ok bool
		row.Count, ok = vals[i].(int64)
		if !ok {
			return nil, fmt.Errorf("converting COUNT(*): column %d with value %v to int64", i, vals[i])
		}
	}
	return &row, nil
}
