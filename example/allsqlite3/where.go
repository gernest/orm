// Autogenerated by github.com/posener/orm; DO NOT EDIT
package allsqlite3

import (
	"time"

	"github.com/posener/orm/common"
)

// WhereInt adds a condition on Int to the WHERE statement
func WhereInt(op common.Op, val int) common.Where {
	return common.NewWhere(op, "int", val)
}

// WhereIntIn adds an IN condition on Int to the WHERE statement
func WhereIntIn(vals ...int) common.Where {
	args := make([]interface{}, len(vals))
	for i := range vals {
		args[i] = vals[i]
	}
	return common.NewWhereIn("int", args...)
}

// WhereIntBetween adds a BETWEEN condition on Int to the WHERE statement
func WhereIntBetween(low, high int) common.Where {
	return common.NewWhereBetween("int", low, high)
}

// WhereString adds a condition on String to the WHERE statement
func WhereString(op common.Op, val string) common.Where {
	return common.NewWhere(op, "string", val)
}

// WhereStringIn adds an IN condition on String to the WHERE statement
func WhereStringIn(vals ...string) common.Where {
	args := make([]interface{}, len(vals))
	for i := range vals {
		args[i] = vals[i]
	}
	return common.NewWhereIn("string", args...)
}

// WhereStringBetween adds a BETWEEN condition on String to the WHERE statement
func WhereStringBetween(low, high string) common.Where {
	return common.NewWhereBetween("string", low, high)
}

// WhereBool adds a condition on Bool to the WHERE statement
func WhereBool(op common.Op, val bool) common.Where {
	return common.NewWhere(op, "bool", val)
}

// WhereBoolIn adds an IN condition on Bool to the WHERE statement
func WhereBoolIn(vals ...bool) common.Where {
	args := make([]interface{}, len(vals))
	for i := range vals {
		args[i] = vals[i]
	}
	return common.NewWhereIn("bool", args...)
}

// WhereBoolBetween adds a BETWEEN condition on Bool to the WHERE statement
func WhereBoolBetween(low, high bool) common.Where {
	return common.NewWhereBetween("bool", low, high)
}

// WhereTime adds a condition on Time to the WHERE statement
func WhereTime(op common.Op, val time.Time) common.Where {
	return common.NewWhere(op, "time", val)
}

// WhereTimeIn adds an IN condition on Time to the WHERE statement
func WhereTimeIn(vals ...time.Time) common.Where {
	args := make([]interface{}, len(vals))
	for i := range vals {
		args[i] = vals[i]
	}
	return common.NewWhereIn("time", args...)
}

// WhereTimeBetween adds a BETWEEN condition on Time to the WHERE statement
func WhereTimeBetween(low, high time.Time) common.Where {
	return common.NewWhereBetween("time", low, high)
}

// WhereSelect adds a condition on Select to the WHERE statement
func WhereSelect(op common.Op, val int) common.Where {
	return common.NewWhere(op, "select", val)
}

// WhereSelectIn adds an IN condition on Select to the WHERE statement
func WhereSelectIn(vals ...int) common.Where {
	args := make([]interface{}, len(vals))
	for i := range vals {
		args[i] = vals[i]
	}
	return common.NewWhereIn("select", args...)
}

// WhereSelectBetween adds a BETWEEN condition on Select to the WHERE statement
func WhereSelectBetween(low, high int) common.Where {
	return common.NewWhereBetween("select", low, high)
}
