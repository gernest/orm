// Package loanerorm was auto-generated by github.com/posener/orm; DO NOT EDIT
package loanerorm

import (
	"github.com/posener/orm/example"

	"database/sql"

	"github.com/posener/orm"
	"github.com/posener/orm/common"
	"github.com/posener/orm/dialect"
)

// table is SQL table name
const table = "loaner"

// createColumnsStatements are columns definitions in different dialects
var createColumnsStatements = map[string]string{
	"mysql":   "`id` INTEGER PRIMARY KEY AUTO_INCREMENT, `name` TEXT, `age` INTEGER, book_id INTEGER, FOREIGN KEY (book_id) REFERENCES book(id)",
	"sqlite3": "'id' INTEGER PRIMARY KEY AUTOINCREMENT, 'name' TEXT, 'age' INTEGER, book_id INTEGER, FOREIGN KEY (book_id) REFERENCES book(id)",
}

// API is the interface of the ORM object
type API interface {
	Close() error
	Create() *CreateBuilder
	Select() *SelectBuilder
	Insert() *InsertBuilder
	Update() *UpdateBuilder
	Delete() *DeleteBuilder

	Logger(orm.Logger)
}

// Querier is the interface for a SELECT SQL statement
type Querier interface {
	Query() ([]example.Loaner, error)
}

// Counter is the interface for a SELECT SQL statement for counting purposes
type Counter interface {
	Count() ([]LoanerCount, error)
}

// Firster is the interface for a SELECT SQL statement for getting only the
// first item. if no item matches the query, an `orm.ErrNotFound` will be returned.
type Firster interface {
	First() (*example.Loaner, error)
}

// Open opens database connection
func Open(driverName, dataSourceName string) (API, error) {
	db, err := sql.Open(driverName, dataSourceName)
	if err != nil {
		return nil, err
	}
	d, err := dialect.New(driverName)
	if err != nil {
		return nil, err
	}
	return &conn{dialect: d, db: db}, nil
}

// New returns an conn object from a db instance
func New(driverName string, db orm.DB) (API, error) {
	d, err := dialect.New(driverName)
	if err != nil {
		return nil, err
	}
	return &conn{dialect: d, db: db}, nil
}

// Create returns a builder of an SQL CREATE statement
func (c *conn) Create() *CreateBuilder {
	return &CreateBuilder{
		params: common.CreateParams{
			Table:            table,
			ColumnsStatement: createColumnsStatements[c.dialect.Name()],
		},
		conn: c,
	}
}

// Select returns a builder of an SQL SELECT statement
func (c *conn) Select() *SelectBuilder {
	s := &SelectBuilder{
		params: common.SelectParams{Table: table},
		conn:   c,
	}
	s.params.Columns = &s.selector
	return s
}

// Insert returns a builder of an SQL INSERT statement
func (c *conn) Insert() *InsertBuilder {
	return &InsertBuilder{
		params: common.InsertParams{Table: table},
		conn:   c,
	}
}

// Update returns a builder of an SQL UPDATE statement
func (c *conn) Update() *UpdateBuilder {
	return &UpdateBuilder{
		params: common.UpdateParams{Table: table},
		conn:   c,
	}
}

// Delete returns a builder of an SQL DELETE statement
func (c *conn) Delete() *DeleteBuilder {
	return &DeleteBuilder{
		params: common.DeleteParams{Table: table},
		conn:   c,
	}
}

// InsertLoaner returns an SQL INSERT statement builder filled with values of a given object
func (b *InsertBuilder) InsertLoaner(p *example.Loaner) *InsertBuilder {
	b.params.Assignments.Add("name", p.Name)
	b.params.Assignments.Add("age", p.Age)
	b.params.Assignments.Add("book_id", p.Book.ID)
	return b
}

// UpdateLoaner update values for all struct fields
func (b *UpdateBuilder) UpdateLoaner(p *example.Loaner) *UpdateBuilder {
	b.params.Assignments.Add("name", p.Name)
	b.params.Assignments.Add("age", p.Age)
	b.params.Assignments.Add("book_id", p.Book.ID)
	return b
}

// SetName sets value for column name in the INSERT statement
func (b *InsertBuilder) SetName(value string) *InsertBuilder {
	b.params.Assignments.Add("name", value)
	return b
}

// SetName sets value for column name in the UPDATE statement
func (b *UpdateBuilder) SetName(value string) *UpdateBuilder {
	b.params.Assignments.Add("name", value)
	return b
}

// SetAge sets value for column age in the INSERT statement
func (b *InsertBuilder) SetAge(value int) *InsertBuilder {
	b.params.Assignments.Add("age", value)
	return b
}

// SetAge sets value for column age in the UPDATE statement
func (b *UpdateBuilder) SetAge(value int) *UpdateBuilder {
	b.params.Assignments.Add("age", value)
	return b
}

// SetBook sets value for column book_id in the INSERT statement
func (b *InsertBuilder) SetBook(value int64) *InsertBuilder {
	b.params.Assignments.Add("book_id", value)
	return b
}

// SetBook sets value for column book_id in the UPDATE statement
func (b *UpdateBuilder) SetBook(value int64) *UpdateBuilder {
	b.params.Assignments.Add("book_id", value)
	return b
}
