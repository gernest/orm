// Autogenerated by github.com/posener/orm
package allorm

import (
	"strings"

	"github.com/posener/orm/example"
)

// String returns the SQL query string
func (s *TSelect) String() string {
	return strings.Join([]string{
		"SELECT", s.selectString(), "FROM all",
		s.where.String(),
		s.page.String(),
	}, " ")

}

// Exec runs the Query on a given database.
func (s *TSelect) Query() ([]example.All, error) {
	// create select statement
	stmt := s.String()
	args := s.where.Args()
	s.orm.log("Query: '%v' %v", stmt, args)
	rows, err := s.orm.db.Query(stmt, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// extract rows to structures
	var all []example.All
	for rows.Next() {
		var i example.All
		if err := rows.Scan(s.scanArgs(&i)...); err != nil {
			return nil, err
		}
		all = append(all, i)
	}
	return all, rows.Err()
}

// SelectInt Add Int to the selected column of a query
func (s *TSelect) SelectInt() *TSelect {
	s.columns = append(s.columns, "int")
	return s
}

// SelectString Add String to the selected column of a query
func (s *TSelect) SelectString() *TSelect {
	s.columns = append(s.columns, "string")
	return s
}

// SelectBool Add Bool to the selected column of a query
func (s *TSelect) SelectBool() *TSelect {
	s.columns = append(s.columns, "bool")
	return s
}

// scanArgs are list of fields to be given to the sql Scan command
func (s *TSelect) scanArgs(p *example.All) []interface{} {
	if len(s.columns) == 0 {
		// add to args all the fields of p
		return []interface{}{
			&p.Int,
			&p.String,
			&p.Bool,
		}
	}
	m := s.columnsMap()
	args := make([]interface{}, len(s.columns))
	if i := m["int"]; i != 0 {
		args[i-1] = &p.Int
	}
	if i := m["string"]; i != 0 {
		args[i-1] = &p.String
	}
	if i := m["bool"]; i != 0 {
		args[i-1] = &p.Bool
	}
	return args
}
