// Autogenerated by github.com/posener/orm; DO NOT EDIT
package allorm

import (
	"database/sql"

	"github.com/posener/orm/common"
	"github.com/posener/orm/dialect"
)

const table = "all"

var createColumnsStatements = map[string]string{
	"mysql":   "`auto` INTEGER PRIMARY KEY AUTO_INCREMENT, `notnil` TEXT NOT NULL, `int` INTEGER, `int8` INTEGER, `int16` INTEGER, `int32` INTEGER, `int64` INTEGER, `uint` INTEGER, `uint8` INTEGER, `uint16` INTEGER, `uint32` INTEGER, `uint64` INTEGER, `time` DATETIME(3), `varcharstring` VARCHAR(100), `varcharbyte` VARCHAR(100), `string` TEXT, `bytes` BLOB, `bool` BOOLEAN, `pint` INTEGER, `pint8` INTEGER, `pint16` INTEGER, `pint32` INTEGER, `pint64` INTEGER, `puint` INTEGER, `puint8` INTEGER, `puint16` INTEGER, `puint32` INTEGER, `puint64` INTEGER, `ptime` DATETIME(3), `pvarcharstring` VARCHAR(100), `pvarcharbyte` VARCHAR(100), `pstring` TEXT, `pbytes` BLOB, `pbool` BOOLEAN, `select` INTEGER",
	"sqlite3": "'auto' INTEGER PRIMARY KEY AUTOINCREMENT, 'notnil' TEXT NOT NULL, 'int' INTEGER, 'int8' INTEGER, 'int16' INTEGER, 'int32' INTEGER, 'int64' INTEGER, 'uint' INTEGER, 'uint8' INTEGER, 'uint16' INTEGER, 'uint32' INTEGER, 'uint64' INTEGER, 'time' TIMESTAMP, 'varcharstring' VARCHAR(100), 'varcharbyte' VARCHAR(100), 'string' TEXT, 'bytes' BLOB, 'bool' BOOLEAN, 'pint' INTEGER, 'pint8' INTEGER, 'pint16' INTEGER, 'pint32' INTEGER, 'pint64' INTEGER, 'puint' INTEGER, 'puint8' INTEGER, 'puint16' INTEGER, 'puint32' INTEGER, 'puint64' INTEGER, 'ptime' TIMESTAMP, 'pvarcharstring' VARCHAR(100), 'pvarcharbyte' VARCHAR(100), 'pstring' TEXT, 'pbytes' BLOB, 'pbool' BOOLEAN, 'select' INTEGER",
}

// Open opens database connection
func Open(driverName, dataSourceName string) (API, error) {
	db, err := sql.Open(driverName, dataSourceName)
	if err != nil {
		return nil, err
	}
	dialect, err := dialect.New(driverName)
	if err != nil {
		return nil, err
	}
	return &orm{dialect: dialect, db: db}, nil
}

// New returns an orm object from a db instance
func New(driverName string, db DB) (API, error) {
	dialect, err := dialect.New(driverName)
	if err != nil {
		return nil, err
	}
	return &orm{dialect: dialect, db: db}, nil
}

// Create returns a struct for a CREATE statement
func (o *orm) Create() *Create {
	return &Create{
		internal: common.Create{
			Table:            table,
			ColumnsStatement: createColumnsStatements[o.dialect.Name()],
		},
		orm: o,
	}
}

// Select returns an object to create a SELECT statement
func (o *orm) Select() *Select {
	s := &Select{
		internal: common.Select{Table: table},
		orm:      o,
	}
	s.internal.Columns = &s.columns
	return s
}

// Insert returns a new INSERT statement
func (o *orm) Insert() *Insert {
	return &Insert{
		internal: common.Insert{Table: table},
		orm:      o,
	}
}

// Update returns a new UPDATE statement
func (o *orm) Update() *Update {
	return &Update{
		internal: common.Update{Table: table},
		orm:      o,
	}
}

// Delete returns an object for a DELETE statement
func (o *orm) Delete() *Delete {
	return &Delete{
		internal: common.Delete{Table: table},
		orm:      o,
	}
}
