// Autogenerated by github.com/posener/orm; DO NOT EDIT
package personsqlite3

import (
	"database/sql/driver"
	"fmt"
	"reflect"

	"github.com/posener/orm/common"
	"github.com/posener/orm/row"

	"github.com/posener/orm/example"
)

type PersonCount struct {
	example.Person
	Count int64
}

// Select is the struct that holds the SELECT data
type Select struct {
	internal common.Select
	orm      *ORM
	columns  columns
}

// Where applies where conditions on the query
func (s *Select) Where(where common.Where) *Select {
	s.internal.Where = where
	return s
}

// Limit applies rows limit on the query response
func (s *Select) Limit(limit int64) *Select {
	s.internal.Page.Limit = limit
	return s
}

// Page applies rows offset and limit on the query response
func (s *Select) Page(offset, limit int64) *Select {
	s.internal.Page.Offset = offset
	s.internal.Page.Limit = limit
	return s
}

// Query the database
func (s *Select) Query() ([]example.Person, error) {
	rows, err := s.query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// extract rows to structures
	var all []example.Person
	for rows.Next() {
		item, err := s.scan(row.Values(*rows))
		if err != nil {
			return nil, err
		}
		all = append(all, item.Person)
	}
	return all, rows.Err()
}

// Count add a count column to the query
func (s *Select) Count() ([]PersonCount, error) {
	s.columns.count = true
	rows, err := s.query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// extract rows to structures
	var all []PersonCount
	for rows.Next() {
		item, err := s.scan(row.Values(*rows))
		if err != nil {
			return nil, err
		}
		all = append(all, *item)
	}
	return all, rows.Err()
}

// SelectName adds Name to the selected column of a query
func (s *Select) SelectName() *Select {
	s.columns.SelectName = true
	return s
}

// OrderByName set order to the query results according to column name
func (s *Select) OrderByName(dir common.OrderDir) *Select {
	s.internal.Orders.Add("name", dir)
	return s
}

// GroupByName make the query group by column name
func (s *Select) GroupByName() *Select {
	s.internal.Groups.Add("name")
	return s
}

// SelectAge adds Age to the selected column of a query
func (s *Select) SelectAge() *Select {
	s.columns.SelectAge = true
	return s
}

// OrderByAge set order to the query results according to column age
func (s *Select) OrderByAge(dir common.OrderDir) *Select {
	s.internal.Orders.Add("age", dir)
	return s
}

// GroupByAge make the query group by column age
func (s *Select) GroupByAge() *Select {
	s.internal.Groups.Add("age")
	return s
}

// scanArgs are list of fields to be given to the sql Scan command
func (s *Select) scan(vals []driver.Value) (*PersonCount, error) {
	var (
		row PersonCount
		all = s.columns.selectAll()
		i   = 0
	)
	if all || s.columns.SelectName {
		if vals[i] != nil {
			val, ok := vals[i].([]byte)
			if !ok {
				return nil, fmt.Errorf("converting Name: column %d with value %v (type %v) to string", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.Name = (string)(val)
		}
		i++
	}
	if all || s.columns.SelectAge {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting Age: column %d with value %v (type %v) to int", i, vals[i], reflect.TypeOf(vals[i]).Name())
			}
			row.Age = (int)(val)
		}
		i++
	}
	if s.columns.count {
		var ok bool
		row.Count, ok = vals[i].(int64)
		if !ok {
			return nil, fmt.Errorf("converting COUNT(*): column %d with value %v (type %v) to int64", i, vals[i], reflect.TypeOf(vals[i]).Name())
		}
	}
	return &row, nil
}
