// Autogenerated by github.com/posener/orm; DO NOT EDIT
package personsqlite3

import (
	"database/sql/driver"
	"fmt"

	"github.com/posener/orm/dialect/sqlite3"

	"github.com/posener/orm/example"
)

// TSelect is the struct that holds the SELECT data
type TSelect struct {
	Querier
	Argser
	orm     *ORM
	columns columns
	where   *Where
	groupBy
	orderBy
	page Page
}

func (s *TSelect) Args() []interface{} {
	return s.where.Args()
}

// Where applies where conditions on the query
func (s *TSelect) Where(where *Where) *TSelect {
	s.where = where
	return s
}

// Limit applies rows limit on the query response
func (s *TSelect) Limit(limit int64) *TSelect {
	s.page.limit = limit
	return s
}

// Page applies rows offset and limit on the query response
func (s *TSelect) Page(offset, limit int64) *TSelect {
	s.page.offset = offset
	s.page.limit = limit
	return s
}

type PersonCount struct {
	example.Person
	Count int64
}

// String returns the SQL SELECT statement
func (s *TSelect) String() string {
	return sqlite3.Select(s.orm, &s.columns, s.where, s.groupBy, s.orderBy, &s.page)
}

// Query the database
func (s *TSelect) Query() ([]example.Person, error) {
	// create select statement
	stmt := s.String()
	args := s.Args()
	s.orm.log("Query: '%v' %v", stmt, args)
	rows, err := s.orm.db.Query(stmt, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// extract rows to structures
	var all []example.Person
	for rows.Next() {
		item, err := s.scan(rowValues(*rows))
		if err != nil {
			return nil, err
		}
		all = append(all, item.Person)
	}
	return all, rows.Err()
}

// Count add a count column to the query
func (s *TSelect) Count() ([]PersonCount, error) {
	s.columns.count = true
	// create select statement
	stmt := s.String()
	args := s.where.Args()
	s.orm.log("Count: '%v' %v", stmt, args)
	rows, err := s.orm.db.Query(stmt, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// extract rows to structures
	var all []PersonCount
	for rows.Next() {
		item, err := s.scan(rowValues(*rows))
		if err != nil {
			return nil, err
		}
		all = append(all, *item)
	}
	return all, rows.Err()
}

// SelectName Add Name to the selected column of a query
func (s *TSelect) SelectName() *TSelect {
	s.columns.SelectName = true
	return s
}

// OrderByName set order to the query results according to column name
func (s *TSelect) OrderByName(dir OrderDir) *TSelect {
	s.orderBy.add("name", dir)
	return s
}

// GroupByName make the query group by column name
func (s *TSelect) GroupByName() *TSelect {
	s.groupBy.add("name")
	return s
}

// SelectAge Add Age to the selected column of a query
func (s *TSelect) SelectAge() *TSelect {
	s.columns.SelectAge = true
	return s
}

// OrderByAge set order to the query results according to column age
func (s *TSelect) OrderByAge(dir OrderDir) *TSelect {
	s.orderBy.add("age", dir)
	return s
}

// GroupByAge make the query group by column age
func (s *TSelect) GroupByAge() *TSelect {
	s.groupBy.add("age")
	return s
}

// scanArgs are list of fields to be given to the sql Scan command
func (s *TSelect) scan(vals []driver.Value) (*PersonCount, error) {
	var (
		row PersonCount
		all = s.columns.selectAll()
		i   = 0
	)
	if all || s.columns.SelectName {
		if vals[i] != nil {
			val, ok := vals[i].([]byte)
			if !ok {
				return nil, fmt.Errorf("converting Name: column %d with value %v to string", i, vals[i])
			}
			row.Name = string(val)
		}
		i++
	}
	if all || s.columns.SelectAge {
		if vals[i] != nil {
			val, ok := vals[i].(int64)
			if !ok {
				return nil, fmt.Errorf("converting Age: column %d with value %v to int", i, vals[i])
			}
			row.Age = int(val)
		}
		i++
	}
	if s.columns.count {
		var ok bool
		row.Count, ok = vals[i].(int64)
		if !ok {
			return nil, fmt.Errorf("converting COUNT(*): column %d with value %v to int64", i, vals[i])
		}
	}
	return &row, nil
}
