// Package bookorm was auto-generated by github.com/posener/orm; DO NOT EDIT
package bookorm

import (
	"github.com/posener/orm/common"
)

// WhereID adds a condition on ID to the WHERE statement
func WhereID(op common.Op, val int64) common.Where {
	return common.NewWhere(op, "book", "id", val)
}

// WhereIDIn adds an IN condition on ID to the WHERE statement
func WhereIDIn(vals ...int64) common.Where {
	args := make([]interface{}, len(vals))
	for i := range vals {
		args[i] = vals[i]
	}
	return common.NewWhereIn("book", "id", args...)
}

// WhereIDBetween adds a BETWEEN condition on ID to the WHERE statement
func WhereIDBetween(low, high int64) common.Where {
	return common.NewWhereBetween("book", "id", low, high)
}

// WhereName adds a condition on Name to the WHERE statement
func WhereName(op common.Op, val string) common.Where {
	return common.NewWhere(op, "book", "name", val)
}

// WhereNameIn adds an IN condition on Name to the WHERE statement
func WhereNameIn(vals ...string) common.Where {
	args := make([]interface{}, len(vals))
	for i := range vals {
		args[i] = vals[i]
	}
	return common.NewWhereIn("book", "name", args...)
}

// WhereNameBetween adds a BETWEEN condition on Name to the WHERE statement
func WhereNameBetween(low, high string) common.Where {
	return common.NewWhereBetween("book", "name", low, high)
}

// WhereYear adds a condition on Year to the WHERE statement
func WhereYear(op common.Op, val int) common.Where {
	return common.NewWhere(op, "book", "year", val)
}

// WhereYearIn adds an IN condition on Year to the WHERE statement
func WhereYearIn(vals ...int) common.Where {
	args := make([]interface{}, len(vals))
	for i := range vals {
		args[i] = vals[i]
	}
	return common.NewWhereIn("book", "year", args...)
}

// WhereYearBetween adds a BETWEEN condition on Year to the WHERE statement
func WhereYearBetween(low, high int) common.Where {
	return common.NewWhereBetween("book", "year", low, high)
}

// WhereAuthorID adds a condition on AuthorID to the WHERE statement
func WhereAuthorID(op common.Op, val int64) common.Where {
	return common.NewWhere(op, "book", "authorid", val)
}

// WhereAuthorIDIn adds an IN condition on AuthorID to the WHERE statement
func WhereAuthorIDIn(vals ...int64) common.Where {
	args := make([]interface{}, len(vals))
	for i := range vals {
		args[i] = vals[i]
	}
	return common.NewWhereIn("book", "authorid", args...)
}

// WhereAuthorIDBetween adds a BETWEEN condition on AuthorID to the WHERE statement
func WhereAuthorIDBetween(low, high int64) common.Where {
	return common.NewWhereBetween("book", "authorid", low, high)
}
