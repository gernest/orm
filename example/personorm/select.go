// Autogenerated by github.com/posener/orm; DO NOT EDIT
package personorm

import (
	"github.com/posener/orm/common"

	"github.com/posener/orm/example"
)

type PersonCount struct {
	example.Person
	Count int64
}

// SelectBuilder builds an SQL SELECT statement parameters
type SelectBuilder struct {
	params  common.SelectParams
	orm     *orm
	columns columns
}

// Where applies where conditions on the query
func (s *SelectBuilder) Where(where common.Where) *SelectBuilder {
	s.params.Where = where
	return s
}

// Limit applies rows limit on the query response
func (s *SelectBuilder) Limit(limit int64) *SelectBuilder {
	s.params.Page.Limit = limit
	return s
}

// Page applies rows offset and limit on the query response
func (s *SelectBuilder) Page(offset, limit int64) *SelectBuilder {
	s.params.Page.Offset = offset
	s.params.Page.Limit = limit
	return s
}

// SelectName adds Name to the selected column of a query
func (s *SelectBuilder) SelectName() *SelectBuilder {
	s.columns.SelectName = true
	return s
}

// OrderByName set order to the query results according to column name
func (s *SelectBuilder) OrderByName(dir common.OrderDir) *SelectBuilder {
	s.params.Orders.Add("name", dir)
	return s
}

// GroupByName make the query group by column name
func (s *SelectBuilder) GroupByName() *SelectBuilder {
	s.params.Groups.Add("name")
	return s
}

// SelectAge adds Age to the selected column of a query
func (s *SelectBuilder) SelectAge() *SelectBuilder {
	s.columns.SelectAge = true
	return s
}

// OrderByAge set order to the query results according to column age
func (s *SelectBuilder) OrderByAge(dir common.OrderDir) *SelectBuilder {
	s.params.Orders.Add("age", dir)
	return s
}

// GroupByAge make the query group by column age
func (s *SelectBuilder) GroupByAge() *SelectBuilder {
	s.params.Groups.Add("age")
	return s
}
