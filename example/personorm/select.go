// Autogenerated by github.com/posener/orm; DO NOT EDIT
package personorm

import (
	"context"
	"github.com/posener/orm/common"

	"github.com/posener/orm/example"
)

type PersonCount struct {
	example.Person
	Count int64
}

// Select is the struct that holds the SELECT data
type Select struct {
	internal common.Select
	orm      *orm
	columns  columns
}

// Where applies where conditions on the query
func (s *Select) Where(where common.Where) *Select {
	s.internal.Where = where
	return s
}

// Limit applies rows limit on the query response
func (s *Select) Limit(limit int64) *Select {
	s.internal.Page.Limit = limit
	return s
}

// Page applies rows offset and limit on the query response
func (s *Select) Page(offset, limit int64) *Select {
	s.internal.Page.Offset = offset
	s.internal.Page.Limit = limit
	return s
}

// Query the database
func (s *Select) Query(ctx context.Context) ([]example.Person, error) {
	rows, err := s.query(ctx)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// extract rows to structures
	var all []example.Person
	for rows.Next() {
		// check context cancellation
		if err := ctx.Err(); err != nil {
			return nil, err
		}
		item, err := scan(s.orm.dialect.Name(), s.columns, rows)
		if err != nil {
			return nil, err
		}
		all = append(all, item.Person)
	}
	return all, rows.Err()
}

// Count add a count column to the query
func (s *Select) Count(ctx context.Context) ([]PersonCount, error) {
	s.columns.count = true
	rows, err := s.query(ctx)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// extract rows to structures
	var all []PersonCount
	for rows.Next() {
		// check context cancellation
		if err := ctx.Err(); err != nil {
			return nil, err
		}
		item, err := scan(s.orm.dialect.Name(), s.columns, rows)
		if err != nil {
			return nil, err
		}
		all = append(all, *item)
	}
	return all, rows.Err()
}

// SelectName adds Name to the selected column of a query
func (s *Select) SelectName() *Select {
	s.columns.SelectName = true
	return s
}

// OrderByName set order to the query results according to column name
func (s *Select) OrderByName(dir common.OrderDir) *Select {
	s.internal.Orders.Add("name", dir)
	return s
}

// GroupByName make the query group by column name
func (s *Select) GroupByName() *Select {
	s.internal.Groups.Add("name")
	return s
}

// SelectAge adds Age to the selected column of a query
func (s *Select) SelectAge() *Select {
	s.columns.SelectAge = true
	return s
}

// OrderByAge set order to the query results according to column age
func (s *Select) OrderByAge(dir common.OrderDir) *Select {
	s.internal.Orders.Add("age", dir)
	return s
}

// GroupByAge make the query group by column age
func (s *Select) GroupByAge() *Select {
	s.internal.Groups.Add("age")
	return s
}
