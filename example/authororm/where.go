// Package authororm was auto-generated by github.com/posener/orm; DO NOT EDIT
package authororm

import (
	"github.com/posener/orm/example"

	"github.com/posener/orm/common"
)

// WhereID adds a condition on ID to the WHERE statement
func WhereID(op common.Op, val int64) common.Where {
	return common.NewWhere(op, "author", "id", val)
}

// WhereIDIn adds an IN condition on ID to the WHERE statement
func WhereIDIn(vals ...int64) common.Where {
	args := make([]interface{}, len(vals))
	for i := range vals {
		args[i] = vals[i]
	}
	return common.NewWhereIn("author", "id", args...)
}

// WhereIDBetween adds a BETWEEN condition on ID to the WHERE statement
func WhereIDBetween(low, high int64) common.Where {
	return common.NewWhereBetween("author", "id", low, high)
}

// WhereName adds a condition on Name to the WHERE statement
func WhereName(op common.Op, val string) common.Where {
	return common.NewWhere(op, "author", "name", val)
}

// WhereNameIn adds an IN condition on Name to the WHERE statement
func WhereNameIn(vals ...string) common.Where {
	args := make([]interface{}, len(vals))
	for i := range vals {
		args[i] = vals[i]
	}
	return common.NewWhereIn("author", "name", args...)
}

// WhereNameBetween adds a BETWEEN condition on Name to the WHERE statement
func WhereNameBetween(low, high string) common.Where {
	return common.NewWhereBetween("author", "name", low, high)
}

// WhereHobbies adds a condition on Hobbies to the WHERE statement
func WhereHobbies(op common.Op, val string) common.Where {
	return common.NewWhere(op, "author", "hobbies", val)
}

// WhereHobbiesIn adds an IN condition on Hobbies to the WHERE statement
func WhereHobbiesIn(vals ...string) common.Where {
	args := make([]interface{}, len(vals))
	for i := range vals {
		args[i] = vals[i]
	}
	return common.NewWhereIn("author", "hobbies", args...)
}

// WhereHobbiesBetween adds a BETWEEN condition on Hobbies to the WHERE statement
func WhereHobbiesBetween(low, high string) common.Where {
	return common.NewWhereBetween("author", "hobbies", low, high)
}

// WhereBooks adds a condition on Books to the WHERE statement
func WhereBooks(op common.Op, val []*example.Book) common.Where {
	return common.NewWhere(op, "author", "book_id", val)
}

// WhereBooksIn adds an IN condition on Books to the WHERE statement
func WhereBooksIn(vals ...[]*example.Book) common.Where {
	args := make([]interface{}, len(vals))
	for i := range vals {
		args[i] = vals[i]
	}
	return common.NewWhereIn("author", "book_id", args...)
}

// WhereBooksBetween adds a BETWEEN condition on Books to the WHERE statement
func WhereBooksBetween(low, high []*example.Book) common.Where {
	return common.NewWhereBetween("author", "book_id", low, high)
}
