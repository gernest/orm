// Exec creates a table for the given struct
func (b *{{$.Public}}CreateBuilder) Exec() error {
    b.params.Ctx = common.ContextOrBackground(b.params.Ctx)
	stmts := b.conn.dialect.Create(b.conn.db, &b.params)
	b.conn.log("Create: '%v'", strings.Join(stmts, "; "))
	tx, err := b.conn.db.BeginTx(b.params.Ctx, nil)
	if err != nil {
	    return err
	}
	for _, stmt := range stmts {
        _, err := tx.ExecContext(b.params.Ctx, stmt)
        if err != nil {
            tx.Rollback()
            return err
        }
    }
    return tx.Commit()
}

// query is used by the Select.Query and Select.Limit functions
func (b *{{$.Public}}SelectBuilder) query() (*sql.Rows, error) {
	stmt, args := b.conn.dialect.Select(&b.params)
	b.conn.log("Query: '%v' %v", stmt, args)
	return b.conn.db.QueryContext(b.params.Ctx, stmt, args...)
}

// Exec inserts the data to the given database
func (b *{{$.Public}}InsertBuilder) Exec() (*{{$.Graph.Type.Naked.Ext $.Graph.Type.Package}}, error) {
	if len(b.params.Assignments) == 0 {
		return nil, fmt.Errorf("nothing to insert")
	}
    b.params.Ctx = common.ContextOrBackground(b.params.Ctx)
	stmt, args := b.conn.dialect.Insert(&b.params)
	b.conn.log("Insert: '%v' %v", stmt, args)
	res, err := b.conn.db.ExecContext(b.params.Ctx, stmt, args...)
	if err != nil {
	    return nil, err
	}
    return {{$.Private}}ReturnObject(b.params.Assignments, res)
}

// Exec inserts the data to the given database
func (b *{{$.Public}}UpdateBuilder) Exec() (sql.Result, error) {
	if len(b.params.Assignments) == 0 {
		return nil, fmt.Errorf("nothing to update")
	}
    b.params.Ctx = common.ContextOrBackground(b.params.Ctx)
	stmt, args := b.conn.dialect.Update(&b.params)
	b.conn.log("Update: '%v' %v", stmt, args)
	return b.conn.db.ExecContext(b.params.Ctx, stmt, args...)
}

// Exec runs the delete statement on a given database.
func (b *{{$.Public}}DeleteBuilder) Exec() (sql.Result, error) {
	stmt, args := b.conn.dialect.Delete(&b.params)
	b.conn.log("Delete: '%v' %v", stmt, args)
	return b.conn.db.ExecContext(common.ContextOrBackground(b.params.Ctx), stmt, args...)
}

// Query the database
func (b *{{$.Public}}SelectBuilder) Query() ([]{{$.Graph.Type.Naked.Ext $.Graph.Type.Package}}, error) {
    b.params.Ctx = common.ContextOrBackground(b.params.Ctx)
    rows, err := b.query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var (
	    items []{{$.Graph.Type.Naked.Ext $.Graph.Type.Package}}
        {{ if $.Graph.Type.HasOneToManyRelation -}}
        // exists is a mapping from primary key to already parsed structs
        exists = make(map[string]*{{$.Graph.Type.Naked.Ext $.Graph.Type.Package}})
        {{ end -}}
    )
	for rows.Next() {
	    // check context cancellation
	    if err := b.params.Ctx.Err(); err != nil  {
	        return nil, err
	    }
		item, _, err := b.selector.Scan(b.conn.dialect.Name(), common.Values(*rows){{if $.Graph.Type.HasOneToManyRelation}}, exists{{end}})
        if err != nil {
			return nil, err
		}

        {{ if $.Graph.Type.HasOneToManyRelation -}}
        hash := {{$.Private}}HashItem(item)
		if exist := exists[hash]; exist != nil {
		    {{ range $_, $f := $.Graph.Type.References -}}
		    {{ if $f.Type.Slice -}}
			exist.{{$f.Name}} = append(exist.{{$f.Name}}, item.{{$f.Name}}...)
			{{ end -}}
			{{ end -}}
		} else {
			items = append(items, *item)
			exists[hash] = &items[len(items)-1]
		}
		{{ else -}}
		items = append(items, *item)
		{{ end -}}
	}
	return items, rows.Err()
}

// Count add a count column to the query
func (b *{{$.Public}}SelectBuilder) Count() ([]{{$.Graph.Type.Name}}Count, error) {
    b.params.Ctx = common.ContextOrBackground(b.params.Ctx)
    b.selector.count = true
    rows, err := b.query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var (
	    items []{{$.Graph.Type.Name}}Count
        {{ if $.Graph.Type.HasOneToManyRelation -}}
        // exists is a mapping from primary key to already parsed structs
        exists = make(map[string]*{{$.Graph.Type.Naked.Ext $.Graph.Type.Package}})
        {{ end -}}
    )
	for rows.Next() {
	    // check context cancellation
	    if err := b.params.Ctx.Err(); err != nil  {
	        return nil, err
	    }
		item, _, err := b.selector.ScanCount(b.conn.dialect.Name(), common.Values(*rows){{if $.Graph.Type.HasOneToManyRelation}}, exists{{end}})
        if err != nil {
			return nil, err
		}

        {{ if $.Graph.Type.HasOneToManyRelation -}}
        hash := {{$.Private}}HashItem(&item.{{$.Graph.Type.Name}})
		if exist := exists[hash]; exist != nil {
		    {{ range $_, $f := $.Graph.Type.References -}}
		    {{ if $f.Type.Slice -}}
			exist.{{$f.Name}} = append(exist.{{$f.Name}}, item.{{$f.Name}}...)
			{{ end -}}
			{{ end -}}
		} else {
			items = append(items, *item)
			exists[hash] = &items[len(items)-1].{{$.Graph.Type.Name}}
		}
		{{ else -}}
		items = append(items, *item)
		{{ end -}}
	}
	return items, rows.Err()
}

// First returns the first row that matches the query.
// If no row matches the query, an ErrNotFound will be returned.
// This call cancels any paging that was set with the
// {{$.Public}}SelectBuilder previously.
func (b *{{$.Public}}SelectBuilder) First() (*{{$.Graph.Type.Naked.Ext $.Graph.Type.Package}}, error) {
    b.params.Ctx = common.ContextOrBackground(b.params.Ctx)
    b.params.Page.Limit = 1
    b.params.Page.Offset = 0
    rows, err := b.query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	found := rows.Next()
    if !found {
        return nil, orm.ErrNotFound
    }
    item, _, err := b.selector.Scan(b.conn.dialect.Name(), common.Values(*rows){{if $.Graph.Type.HasOneToManyRelation}}, nil{{end}})
    if err != nil {
        return nil, err
    }
	return item, rows.Err()
}

// {{$.Private}}ReturnObject builds {{$.Graph.Type.Naked.Ext $.Graph.Type.Package}} from assignment values
// and from the sql result ID, for returning an object from INSERT transactions
func {{$.Private}}ReturnObject(assignments common.Assignments, res sql.Result) (*{{$.Graph.Type.Naked.Ext $.Graph.Type.Package}}, error) {
	ret := new({{$.Graph.Type.Naked.Ext $.Graph.Type.Package}})
	for _, assign := range assignments {
        switch assign.Column {
        {{ range $_, $f := $.Graph.Type.Fields -}}
        case "{{(index $f.Columns 0).Name}}":
            ret.{{$f.AccessName}} = assign.OriginalValue.({{$f.Type.Ext $.Graph.Type.Package}})
        {{ end -}}
        }
	}
	{{ if eq (len $.Graph.Type.PrimaryKeys) 1 -}}
	id, err := res.LastInsertId()
	if err != nil {
	    return nil, err
	}
	ret.{{(index $.Graph.Type.PrimaryKeys 0).AccessName}} = {{(index $.Graph.Type.PrimaryKeys 0).Type.Ext $.Graph.Type.Package}}(id)
	{{ end -}}
	return ret, nil
}

{{ if $.Graph.Type.HasOneToManyRelation -}}
func {{$.Private}}HashItem(item *{{$.Graph.Type.Name}}) string {
    var str string
    {{ range $f := $.Graph.Type.PrimaryKeys -}}
    str += fmt.Sprintf("%v", item.{{$f.AccessName}})
    {{ end -}}
    return str
}
{{ end -}}