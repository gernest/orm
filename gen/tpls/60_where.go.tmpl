type {{$.Public}}WhereBuilder struct {}

{{ range $_, $f := $.Graph.Type.Fields -}}
{{ if not $f.IsReference -}}
// {{$.Public}}Where{{$f.Name}} adds a condition on {{$f.Name}} to the WHERE statement
func (*{{$.Public}}WhereBuilder) {{$f.Name}}(op runtime.Op, val {{$f.Type.Ext $.Graph.Type.Package}}) runtime.Where {
	return runtime.NewWhere(op, "{{$f.Column.Name}}", val)
}

// {{$.Public}}Where{{$f.Name}}In adds an IN condition on {{$f.Name}} to the WHERE statement
func (*{{$.Public}}WhereBuilder) {{$f.Name}}In(vals ...{{$f.Type.Ext $.Graph.Type.Package}}) runtime.Where {
	args := make([]interface{}, len(vals))
	for i := range vals {
		args[i] = vals[i]
	}
	return runtime.NewWhereIn("{{$f.Column.Name}}", args...)
}

// {{$.Public}}Where{{$f.Name}}Between adds a BETWEEN condition on {{$f.Name}} to the WHERE statement
func (*{{$.Public}}WhereBuilder) {{$f.Name}}Between(low, high {{$f.Type.Ext $.Graph.Type.Package}}) runtime.Where {
	return runtime.NewWhereBetween("{{$f.Column.Name}}", low, high)
}
{{ end -}}
{{ end -}}
