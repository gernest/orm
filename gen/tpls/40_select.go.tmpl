type {{$.Public}}Scanner interface {
    Params() common.SelectParams
    Scan(dialect string, values []driver.Value{{if .Type.HasOneToManyRelation}}, exists map[{{.Type.PrimaryKey.Type.ExtName $.Type.Package}}]*{{.Type.ExtName $.Type.Package}}{{end}}) (*{{$.Type.ExtNaked $.Type.Package}}, error)
}

// {{.Type.Name}}Count is a struct for counting rows of type {{.Type.Name}}
type {{.Type.Name}}Count struct {
    {{.Type.ExtName $.Type.Package}}
    Count int64
}

// {{$.Public}}SelectBuilder builds an SQL SELECT statement parameters
type {{$.Public}}SelectBuilder struct {
	params common.SelectParams
	conn *{{.Private}}Conn
	selector {{$.Private}}Selector
}

// {{$.Private}}Scanner represents a builder that exposes only Params and Scan method
type {{$.Private}}Scanner struct {
    builder *{{$.Public}}SelectBuilder
}

func (s *{{$.Private}}Scanner) Params() common.SelectParams {
    return s.builder.params
}

func (s *{{$.Private}}Scanner) Scan(dialect string, values []driver.Value{{if .Type.HasOneToManyRelation}}, exists map[{{.Type.PrimaryKey.Type.ExtName $.Type.Package}}]*{{.Type.ExtName $.Type.Package}}{{end}}) (*{{$.Type.ExtNaked $.Type.Package}}, error) {
    return  s.builder.selector.Scan(dialect, values{{if .Type.HasOneToManyRelation}}, exists{{end}})
}

func (b *{{$.Public}}SelectBuilder) Scanner() {{$.Public}}Scanner {
    return &{{$.Private}}Scanner{builder: b}
}

// Where applies where conditions on the query
func (b *{{$.Public}}SelectBuilder) Where(where common.Where) *{{$.Public}}SelectBuilder {
	b.params.Where = where
	return b
}

// Limit applies rows limit on the query response
func (b *{{$.Public}}SelectBuilder) Limit(limit int64) *{{$.Public}}SelectBuilder {
	b.params.Page.Limit = limit
	return b
}

// Page applies rows offset and limit on the query response
func (b *{{$.Public}}SelectBuilder) Page(offset, limit int64) *{{$.Public}}SelectBuilder {
	b.params.Page.Offset = offset
	b.params.Page.Limit = limit
	return b
}

{{ range $_, $f := .Type.Fields -}}
{{ if not $f.IsReference }}
// Select{{$f.Name}} adds {{$f.Name}} to the selected column of a query
func (b *{{$.Public}}SelectBuilder) Select{{$f.Name}}() *{{$.Public}}SelectBuilder {
    b.selector.Select{{$f.Name}} = true
    return b
}
{{ else }}

type {{$.Private}}{{$f.Name}}Scanner interface {
    Params() common.SelectParams
    Scan(dialect string, values []driver.Value{{if $f.Type.HasOneToManyRelation}}, exists map[{{$f.Type.PrimaryKey.Type.ExtName $.Type.Package}}]*{{$f.Type.ExtName $.Type.Package}}{{end}}) (*{{$f.Type.ExtNaked $.Type.Package}}, error)
}

// Join{{$f.Name}} add a join query for {{$f.Name}}
func (b *{{$.Public}}SelectBuilder) Join{{$f.Name}}(scanner {{$.Private}}{{$f.Name}}Scanner) *{{$.Public}}SelectBuilder {
    b.selector.Join{{$f.Name}} = scanner
    return b
}
{{ end }}

{{ if not $f.Type.Slice -}}
// OrderBy{{$f.Name}} set order to the query results according to column {{$f.Column}}
func (b *{{$.Public}}SelectBuilder) OrderBy{{$f.Name}}(dir common.OrderDir) *{{$.Public}}SelectBuilder {
    b.params.Orders.Add("{{$f.Column}}", dir)
    return b
}

// GroupBy{{$f.Name}} make the query group by column {{$f.Column}}
func (b *{{$.Public}}SelectBuilder) GroupBy{{$f.Name}}() *{{$.Public}}SelectBuilder {
    b.params.Groups.Add("{{$f.Column}}")
    return b
}
{{ end -}}
{{ end -}}

// Context sets the context for the SQL query
func (b *{{$.Public}}SelectBuilder) Context(ctx context.Context) *{{$.Public}}SelectBuilder {
	b.params.Ctx = ctx
	return b
}
