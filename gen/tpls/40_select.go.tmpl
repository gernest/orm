type {{$.Public}}Joiner interface {
    Params() runtime.SelectParams
    Scan(dialect string, values []driver.Value{{if $.Graph.Type.HasOneToManyRelation}}, exists map[string]*{{$.Graph.Type.Naked.Ext $.Graph.Type.Package}}{{end}}) (*{{$.Graph.Type.Naked.Ext $.Graph.Type.Package}}, int, error)
}

// {{$.Graph.Type.Name}}Count is a struct for counting rows of type {{$.Graph.Type.Name}}
type {{$.Graph.Type.Name}}Count struct {
    {{$.Graph.Type.Ext $.Graph.Type.Package}}
    Count int64
}

// {{$.Public}}SelectBuilder builds an SQL SELECT statement parameters
type {{$.Public}}SelectBuilder struct {
	params runtime.SelectParams
	conn *{{.Private}}Conn
	selector {{$.Private}}Selector
}

// {{$.Private}}Joiner represents a builder that exposes only Params and Scan method
type {{$.Private}}Joiner struct {
    builder *{{$.Public}}SelectBuilder
}

func (s *{{$.Private}}Joiner) Params() runtime.SelectParams {
    return s.builder.params
}

func (s *{{$.Private}}Joiner) Scan(dialect string, values []driver.Value{{if $.Graph.Type.HasOneToManyRelation}}, exists map[string]*{{$.Graph.Type.Naked.Ext $.Graph.Type.Package}}{{end}}) (*{{$.Graph.Type.Naked.Ext $.Graph.Type.Package}}, int, error) {
    return s.builder.selector.Scan(dialect, values{{if $.Graph.Type.HasOneToManyRelation}}, exists{{end}})
}

// Joiner returns an object to be used in a join operation with {{$.Graph.Type.Name}}
func (b *{{$.Public}}SelectBuilder) Joiner() {{$.Public}}Joiner {
    return &{{$.Private}}Joiner{builder: b}
}

// Where applies where conditions on the query
func (b *{{$.Public}}SelectBuilder) Where(where runtime.Where) *{{$.Public}}SelectBuilder {
	b.params.Where = where
	return b
}

// Limit applies rows limit on the query response
func (b *{{$.Public}}SelectBuilder) Limit(limit int64) *{{$.Public}}SelectBuilder {
	b.params.Page.Limit = limit
	return b
}

// Page applies rows offset and limit on the query response
func (b *{{$.Public}}SelectBuilder) Page(offset, limit int64) *{{$.Public}}SelectBuilder {
	b.params.Page.Offset = offset
	b.params.Page.Limit = limit
	return b
}

{{ range $_, $refType := $.Graph.Type.ReferencedTypes -}}
// {{$.Private}}{{$refType.Name}}Joiner is a scanner that defined by .Select().Joiner()
// of an ORM object for type {{$refType.Name}}
type {{$.Private}}{{$refType.Name}}Joiner interface {
    Params() runtime.SelectParams
    Scan(dialect string, values []driver.Value{{if $refType.HasOneToManyRelation}}, exists map[string]*{{$refType.Ext $.Graph.Type.Package}}{{end}}) (*{{$refType.Ext $.Graph.Type.Package}}, int, error)
}
{{ end -}}

{{ range $_, $f := $.Graph.Type.References -}}
// Join{{$f.Name}} add a join query for {{$f.Name}}
func (b *{{$.Public}}SelectBuilder) Join{{$f.Name}}(scanner {{$.Private}}{{$f.Type.Name}}Joiner) *{{$.Public}}SelectBuilder {
    b.selector.Join{{$f.Name}} = scanner
    return b
}
{{ end -}}

// OrderBy set order to the query results according to column
func (b *{{$.Public}}SelectBuilder) OrderBy(col {{$.Private}}Column, dir runtime.OrderDir) *{{$.Public}}SelectBuilder {
    b.params.Orders.Add(string(col), dir)
    return b
}

// GroupBy make the query group by column
func (b *{{$.Public}}SelectBuilder) GroupBy(col {{$.Private}}Column) *{{$.Public}}SelectBuilder {
    b.params.Groups.Add(string(col))
    return b
}

// Context sets the context for the SQL query
func (b *{{$.Public}}SelectBuilder) Context(ctx context.Context) *{{$.Public}}SelectBuilder {
	b.params.Ctx = ctx
	return b
}
