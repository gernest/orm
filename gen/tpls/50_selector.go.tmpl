// {{$.Private}}Selector selects columns for SQL queries and for parsing SQL rows
type {{$.Private}}Selector struct {
    {{ range $i, $f := $.Graph.Type.Fields -}}
    {{ if not $f.IsReference -}}
    Select{{$f.Name}} bool
    {{ else -}}
    Join{{$f.Name}} {{$.Private}}{{$f.Type.Name}}Joiner
    {{ end -}}
    {{ end -}}
    count bool // used for sql COUNT(*) column
}

// Columns are the names of selected columns
func (s *{{$.Private}}Selector) Columns() []string {
	var (
	    cols []string
	    all = s.selectAll()
    )
    {{ range $_, $f := $.Graph.Type.Fields -}}
    {{ if not $f.IsReference -}}
    if all || s.Select{{$f.Name}} {
        cols = append(cols, "{{$f.Column.Name}}")
    }
    {{ end -}}
    {{ end -}}
	return cols
}

// Joins are join options of the query
func (s *{{$.Private}}Selector) Joins() []runtime.JoinParams {
	var joins []runtime.JoinParams
	{{ range $e := $.Graph.Out -}}
	if selector := s.Join{{$e.LocalField.Name}}; selector != nil {
        joins = append(joins, runtime.JoinParams{
            Pairings: []runtime.Pairing{
                {{ range $i, $pk := $e.RelationType.PrimaryKeys -}}
                {
                    Column: "{{(index $e.SrcField.Columns $i).Name}}",
                    JoinedColumn: "{{$pk.Column.Name}}",
                },
                {{ end -}}
            },
            SelectParams: selector.Params(),
        })
	}
	{{ end -}}
	{{ range $e := $.Graph.In -}}
	if selector := s.Join{{$e.LocalField.Name}}; selector != nil {
        joins = append(joins, runtime.JoinParams{
            Pairings: []runtime.Pairing{
                {{ range $i, $pk := $e.RelationType.PrimaryKeys -}}
                {
                    Column: "{{$pk.Column.Name}}",
                    JoinedColumn: "{{(index $e.SrcField.Columns $i).Name}}",
                },
                {{ end -}}
            },
            SelectParams: selector.Params(),
        })
	}
	{{ end -}}
	return joins
}

// Count is true when a COUNT(*) column should be added to the query
func (s *{{$.Private}}Selector) Count() bool {
    return s.count
}

// Scan scans an SQL row to a {{$.Graph.Type.Name}} struct
// It returns the scanned {{$.Graph.Type.Ext $.Graph.Type.Package}} and the number of scanned fields,
// and an error in case of failure.
func (s *{{$.Private}}Selector) Scan(dialect string, vals []driver.Value{{if $.Graph.Type.HasOneToManyRelation}}, exists map[string]*{{$.Graph.Type.Ext $.Graph.Type.Package}}{{end}}) (*{{$.Graph.Type.Ext $.Graph.Type.Package}}, int, error) {
    item, n, err := s.ScanCount(dialect, vals{{if $.Graph.Type.HasOneToManyRelation}}, exists{{end}})
    if err != nil {
        return nil, n, err
    }
    return &item.{{$.Graph.Type.Name}}, n, nil
}

// ScanCount scans an SQL row to a {{$.Graph.Type.Name}}Count struct
func (s *{{$.Private}}Selector) ScanCount(dialect string, vals []driver.Value{{if $.Graph.Type.HasOneToManyRelation}}, exists map[string]*{{$.Graph.Type.Ext $.Graph.Type.Package}}{{end}}) (*{{$.Graph.Type.Name}}Count, int, error) {
    switch dialect {
    {{- range $_, $dialect := $.Dialects }}
    case "{{$dialect.Name}}":
        return s.scan{{$dialect.Name}}(vals{{if $.Graph.Type.HasOneToManyRelation}}, exists{{end}})
    {{ end -}}
    default:
        return nil, 0, fmt.Errorf("unsupported dialect %s", dialect)
    }
}

{{ range $_, $dialect := $.Dialects }}
// scan{{$dialect.Name}} scans {{$dialect.Name}} row to a {{$.Graph.Type.Name}} struct
func (s *{{$.Private}}Selector) scan{{$dialect.Name}} (vals []driver.Value{{if $.Graph.Type.HasOneToManyRelation}}, exists map[string]*{{$.Graph.Type.Ext $.Graph.Type.Package}}{{end}}) (*{{$.Graph.Type.Name}}Count, int, error) {
    var (
        row {{$.Graph.Type.Name}}Count
        all = s.selectAll()
        i int
        rowExists bool
    )
    {{ range $_, $f := $.Graph.Type.Fields -}}
    {{ if not $f.IsReference -}}
    if all || s.Select{{$f.Name}} {
        if i >= len(vals) {
            return nil, 0, fmt.Errorf("not enough columns returned: %d", len(vals))
        }
        if vals[i] != nil && !rowExists {
{{ $dialect.ConvertValueCode $f -}}
        }
        {{ if and $.Graph.Type.HasOneToManyRelation -}}
        {{ if or $f.Unique $f.PrimaryKey -}}
        // check if we scanned this item in previous rows. If we did, set `rowExists`,
        // so other columns in this table won't be evaluated. We only need values
        // from other tables.
        if exists[{{$.Private}}HashItem(&row.{{$.Graph.Type.Name}})] != nil {
            rowExists = true
        }
        {{ end -}}
        {{ end -}}
        i++
    }
    {{ end -}}
    {{ end -}}

    if s.count {
        switch val := vals[i].(type) {
        case int64:
            row.Count = val
        case []byte:
            row.Count = runtime.ParseInt(val)
        default:
            return nil, 0, runtime.ErrConvert("COUNT(*)", i, vals[i], "int64, []byte")
        }
        i++
    }

    {{ range $_, $f := $.Graph.Type.References }}
    if j := s.Join{{$f.Name}}; j != nil {
        tmp, n, err := j.Scan("{{$dialect.Name}}", vals[i:]{{if $f.Type.HasOneToManyRelation}}, nil{{end}})
        if err != nil {
            return nil, 0, fmt.Errorf("sub scanning {{$f.AccessName}}, cols [%d:%d]: %s", i, len(vals), err)
        }
        {{ if $f.Type.Slice -}}
        row.{{$f.AccessName}} = append(row.{{$f.AccessName}}, {{if not $f.Type.Pointer}}*{{end}}tmp)
        {{ else -}}
        row.{{$f.AccessName}} = {{ if not $f.Type.Pointer}}*{{end}}tmp
        {{ end -}}
        i += n
    }
    {{ end }}

    return &row, i, nil
}
{{ end }}

// selectAll returns true if no column was specifically selected
func (s *{{$.Private}}Selector) selectAll() bool {
    return {{ range $i, $f := $.Graph.Type.Fields -}}{{if not $f.IsReference }} !s.Select{{$f.Name}} && {{end}}{{end}} !s.count
}
