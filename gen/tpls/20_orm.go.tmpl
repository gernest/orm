// {{$.Graph.Type.Name}}ORM is the interface of the ORM object
type {{$.Graph.Type.Name}}ORM interface {
    Close() error
    Create() *{{$.Public}}CreateBuilder
    Select(...{{$.Private}}Column) *{{$.Public}}SelectBuilder
    Insert() *{{$.Public}}InsertBuilder
    Update() *{{$.Public}}UpdateBuilder
    Delete() *{{$.Public}}DeleteBuilder
    Where() *{{$.Public}}WhereBuilder

    {{ if $.Graph.Type.PrimaryKeys -}}
    // Get returns an object by primary key
    // In case that the object was not found, it returns an error orm.ErrNotFound
    Get({{range $_, $pk := $.Graph.Type.PrimaryKeys}}{{$pk.PrivateName}} {{$pk.Type.Ext $.Graph.Type.Package}},{{end}}) (*{{$.Graph.Type.Naked.Ext $.Graph.Type.Package}}, error)
    {{ end -}}
    Logger(orm.Logger)
}

// Open{{$.Graph.Type.Name}}ORM opens database connection
func Open{{$.Graph.Type.Name}}ORM(driverName, dataSourceName string) ({{$.Graph.Type.Name}}ORM, error) {
	db, err := sql.Open(driverName, dataSourceName)
	if err != nil {
		return nil, err
	}
	return New{{$.Graph.Type.Name}}ORM(driverName, db)
}

// New{{$.Graph.Type.Name}}ORM returns an conn object from a db instance
func New{{$.Graph.Type.Name}}ORM(driverName string, db orm.DB) ({{$.Graph.Type.Name}}ORM, error) {
	d := dialect.Get(driverName)
	if d == nil {
		return nil, fmt.Errorf("dialect %s does not exists", driverName)
	}
    return &{{.Private}}Conn{dialect: d, db: db}, nil
}

// {{.Private}}Conn represents a DB connection for manipulating a given struct.
// All functions available to interact with an SQL table that is related
// to this struct, are done by an instance of this object.
// To get an instance of orm use Open or New functions.
type {{.Private}}Conn struct {
	dialect dialect.API
	db      orm.DB
	logger  orm.Logger
}

func (c *{{.Private}}Conn) Close() error {
	return c.db.Close()
}

// Logger sets a logger to the conn package
func (c *{{.Private}}Conn) Logger(logger orm.Logger) {
	c.logger = logger
}

// Create returns a builder of an SQL CREATE statement
func (c *{{.Private}}Conn) Create() *{{$.Public}}CreateBuilder {
	return &{{$.Public}}CreateBuilder{
		params: runtime.CreateParams{
		    Table: {{$.Private}}Table,
		    MarshaledTable: {{$.Private}}TableProperties,
        },
	    conn: c,
    }
}

type {{$.Private}}Column string

const (
    {{ range $_, $f := $.Graph.Type.Fields -}}
    {{ if not $f.IsReference -}}
    // {{$.Public}}Col{{$f.Name}} is used to select the {{$f.Name}} column in SELECT queries
    {{$.Public}}Col{{$f.Name}} {{$.Private}}Column = "{{$f.Column.Name}}"
    {{ end -}}
    {{ end -}}
)

var {{$.Private}}OrderedColumns = []string{
    {{ range $_, $f := $.Graph.Type.Fields -}}
    {{ if not $f.IsReference -}}
    string({{$.Public}}Col{{$f.Name}}),
    {{ end -}}
    {{ end -}}
}

// Select returns a builder of an SQL SELECT statement
func (c *{{.Private}}Conn) Select(cols ...{{$.Private}}Column) *{{$.Public}}SelectBuilder {
	s := &{{$.Public}}SelectBuilder{
		params: runtime.SelectParams{
		    Table: {{$.Private}}Table,
		    OrderedColumns: {{$.Private}}OrderedColumns,
        },
		conn: c,
	}
	s.params.Columns = make(map[string]bool, len(cols))
	for _, col := range cols {
		s.params.Columns[string(col)] = true
	}
    return s
}

// Insert returns a builder of an SQL INSERT statement
func (c *{{.Private}}Conn) Insert() *{{$.Public}}InsertBuilder {
	return &{{$.Public}}InsertBuilder{
		params: runtime.InsertParams{Table: {{$.Private}}Table},
		conn: c,
	}
}

// Update returns a builder of an SQL UPDATE statement
func (c *{{.Private}}Conn) Update() *{{$.Public}}UpdateBuilder {
	return &{{$.Public}}UpdateBuilder{
		params: runtime.UpdateParams{Table: {{$.Private}}Table},
		conn: c,
    }
}

// Delete returns a builder of an SQL DELETE statement
func (c *{{.Private}}Conn) Delete() *{{$.Public}}DeleteBuilder {
	return &{{$.Public}}DeleteBuilder{
		params: runtime.DeleteParams{Table: {{$.Private}}Table},
		conn: c,
    }
}

// Where returns a builder of an SQL WHERE statement
func (c *{{.Private}}Conn) Where() *{{$.Public}}WhereBuilder {
	return &{{$.Public}}WhereBuilder{}
}

// log if a logger was set
func (c *{{.Private}}Conn) log(s string, args ...interface{}) {
	if c.logger == nil {
		return
	}
	c.logger(s, args...)
}

// === CreateBuilder ===

// {{$.Public}}CreateBuilder builds an SQL CREATE statement parameters
type {{$.Public}}CreateBuilder struct {
	params runtime.CreateParams
	conn   *{{.Private}}Conn
}

// IfNotExists sets IF NOT EXISTS for the CREATE SQL statement
func (b *{{$.Public}}CreateBuilder) IfNotExists() *{{$.Public}}CreateBuilder {
	b.params.IfNotExists = true
	return b
}
// AutoMigrate sets auto-migration mode for table creation
func (b *{{$.Public}}CreateBuilder) AutoMigrate() *{{$.Public}}CreateBuilder {
	b.params.AutoMigrate = true
	return b
}

// Context sets the context for the SQL query
func (b *{{$.Public}}CreateBuilder) Context(ctx context.Context) *{{$.Public}}CreateBuilder {
	b.params.Ctx = ctx
	return b
}

// === InsertBuilder ===

// {{$.Public}}InsertBuilder builds an INSERT statement parameters
type {{$.Public}}InsertBuilder struct {
	params runtime.InsertParams
	conn   *{{.Private}}Conn
}

// Context sets the context for the SQL query
func (b *{{$.Public}}InsertBuilder) Context(ctx context.Context) *{{$.Public}}InsertBuilder {
	b.params.Ctx = ctx
	return b
}

// Insert{{$.Graph.Type.Name}} returns an SQL INSERT statement builder filled with values of a given object
func (b *{{$.Public}}InsertBuilder) Insert{{$.Graph.Type.Name}}(p *{{$.Graph.Type.Naked.Ext $.Graph.Type.Package}}) *{{$.Public}}InsertBuilder {
	{{ range $_, $f := $.Graph.Type.Fields -}}
	{{ if $f.IsSettable -}}
	{{ if not $f.IsReference -}}
	b.params.Assignments.Add("{{$f.Column.Name}}", p.{{$f.AccessName}}, p.{{$f.AccessName}})
	{{ else -}}
	{{ if $f.Type.Pointer -}}
	if p.{{$f.Name}} != nil {
	{{ end -}}
	{{ range $i, $col := $f.Columns -}}
	b.params.Assignments.Add("{{$col.Name}}", p.{{$f.AccessName}}.{{(index $f.Type.PrimaryKeys $i).Name}}, p.{{$f.AccessName}})
	{{ end -}}
	{{ if $f.Type.Pointer -}}
	}
	{{ end -}}
	{{ end -}}
	{{ end -}}
	{{ end -}}
	return b
}

// === UpdateBuilder ===

// {{$.Public}}UpdateBuilder builds SQL INSERT statement parameters
type {{$.Public}}UpdateBuilder struct {
	params runtime.UpdateParams
	conn   *{{.Private}}Conn
}

// Where sets the WHERE statement to the SQL query
func (b *{{$.Public}}UpdateBuilder) Where(where runtime.Where) *{{$.Public}}UpdateBuilder {
	b.params.Where = where
	return b
}

// Context sets the context for the SQL query
func (b *{{$.Public}}UpdateBuilder) Context(ctx context.Context) *{{$.Public}}UpdateBuilder {
	b.params.Ctx = ctx
	return b
}

// Update{{$.Graph.Type.Name}} update values for all struct fields
func (b *{{$.Public}}UpdateBuilder) Update{{$.Graph.Type.Name}}(p *{{$.Graph.Type.Naked.Ext $.Graph.Type.Package}}) *{{$.Public}}UpdateBuilder {
	{{ range $_, $f := $.Graph.Type.Fields -}}
    {{ if $f.IsSettable -}}
	{{ if not $f.IsReference -}}
	b.params.Assignments.Add("{{$f.Column.Name}}", p.{{$f.AccessName}}, p.{{$f.AccessName}})
	{{ else -}}
	{{ if $f.Type.Pointer -}}
	if p.{{$f.Name}} != nil {
	{{ end -}}
	{{ range $i, $col := $f.Columns -}}
	b.params.Assignments.Add("{{$col.Name}}", p.{{$f.AccessName}}.{{(index $f.Type.PrimaryKeys $i).Name}}, p.{{$f.AccessName}})
	{{ end -}}
	{{ if $f.Type.Pointer -}}
	}
	{{ end -}}
	{{ end -}}
	{{ end -}}
	{{ end -}}
	return b
}

// === DeleteBuilder ===

// {{$.Public}}DeleteBuilder builds SQL DELETE statement parameters
type {{$.Public}}DeleteBuilder struct {
	params runtime.DeleteParams
	conn   *{{.Private}}Conn
}

// Where applies where conditions on the SQL query
func (b *{{$.Public}}DeleteBuilder) Where(w runtime.Where) *{{$.Public}}DeleteBuilder {
	b.params.Where = w
	return b
}

// Context sets the context for the SQL query
func (b *{{$.Public}}DeleteBuilder) Context(ctx context.Context) *{{$.Public}}DeleteBuilder {
	b.params.Ctx = ctx
	return b
}

// === Update/Insert fields ===

{{- range $_, $f := $.Graph.Type.Fields }}

{{ if $f.IsSettable -}}
// Set{{$f.Name}} sets value for column in the INSERT statement
{{ $varName := "value" -}}
func (b *{{$.Public}}InsertBuilder) Set{{$f.Name}}({{$varName}} {{if $f.IsReference}}*{{end}}{{$f.Type.Naked.Ext $.Graph.Type.Package}}) *{{$.Public}}InsertBuilder {
    {{ if $f.IsReference -}}
	{{ range $i, $col := $f.Columns -}}
	b.params.Assignments.Add("{{$col.Name}}", {{$varName}}.{{(index $f.Type.PrimaryKeys $i).Name}}, {{$varName}})
	{{ end -}}
    {{ else -}}
	b.params.Assignments.Add("{{$f.Column.Name}}", {{$varName}}, {{$varName}})
	{{ end -}}
	return b
}

// Set{{$f.Name}} sets value for column in the UPDATE statement
func (b *{{$.Public}}UpdateBuilder) Set{{$f.Name}}({{$varName}} {{if $f.IsReference}}*{{end}}{{$f.Type.Naked.Ext $.Graph.Type.Package}}) *{{$.Public}}UpdateBuilder {
    {{ if $f.IsReference -}}
	{{ range $i, $col := $f.Columns -}}
	b.params.Assignments.Add("{{$col.Name}}", {{$varName}}.{{(index $f.Type.PrimaryKeys $i).Name}}, {{$varName}})
	{{ end -}}
    {{ else -}}
	b.params.Assignments.Add("{{$f.Column.Name}}", {{$varName}}, {{$varName}})
	{{ end -}}
	return b
}

{{ end -}}
{{ end -}}

{{ if $.Graph.Type.PrimaryKeys -}}
func (c *{{.Private}}Conn) Get({{range $i, $pk := $.Graph.Type.PrimaryKeys}}key{{$i}} {{$pk.Type.Ext $.Graph.Type.Package}},{{end}}) (*{{$.Graph.Type.Naked.Ext $.Graph.Type.Package}}, error) {
    return c.Select().Where(
    {{- range $i, $pk := $.Graph.Type.PrimaryKeys -}}
        c.Where().{{$pk.Name}}(orm.OpEq, key{{$i}})
        {{- if ne (plus1 $i) (len $.Graph.Type.PrimaryKeys) -}}
        .And(
        {{- end -}}
    {{end}}
    {{- range $i, $_ := $.Graph.Type.PrimaryKeys -}}
    {{- if ne (plus1 $i) (len $.Graph.Type.PrimaryKeys) -}}
    )
    {{- end -}}
    {{- end -}}
    ).First()
}
{{ end -}}
