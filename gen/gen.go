package gen

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/posener/orm/dialect"
	"github.com/posener/orm/gen/b0x"
	"github.com/posener/orm/load"
)

//go:generate fileb0x b0x.yml
//go:generate sed -i 1d b0x/ab0x.go

const (
	header = "// Code generated by github.com/posener/orm; DO NOT EDIT\n"
)

// TemplateData arguments for the templates
type TemplateData struct {
	// The name	of the new created package
	Type     *load.Type
	Dialects []dialect.Generator
}

var templates = template.New("").Funcs(template.FuncMap{
	"plus1": func(x int) int { return x + 1 },
})

func init() {
	files, err := b0x.WalkDirs(".", false, "")
	if err != nil {
		panic(err)
	}
	for _, file := range files {
		if !strings.HasSuffix(file, ".go.tpl") {
			continue
		}
		data, err := b0x.ReadFile(file)
		if err != nil {
			panic(err)
		}
		templates.New(file).Parse(string(data))
		log.Printf("loaded template %s", file)
	}
}

// Gen generates all the ORM files for a given struct in a given package.
// st is the type descriptor of the struct
func Gen(tp *load.Type) error {
	// get the package ormDir on disk
	structPkgDir, err := packagePath(tp.ImportPath)
	if err != nil {
		return err
	}

	dialects := dialect.NewGen()

	data := TemplateData{Type: tp, Dialects: dialects}

	ormFileName := strings.ToLower(tp.Name + "_orm.go")
	ormFilePath := filepath.Join(structPkgDir, ormFileName)

	log.Printf("Generating code for %s into %s", tp, ormFilePath)

	ormFile, err := os.Create(ormFilePath)
	if err != nil {
		return fmt.Errorf("creating file %s: %s", ormFilePath, err)
	}

	// first copy import data
	err = templates.ExecuteTemplate(ormFile, "import.go.tpl", data)
	if err != nil {
		return err
	}

	for _, tpl := range templates.Templates() {
		if tpl.Name() == "import.go.tpl" {
			continue
		}
		err := tpl.Execute(ormFile, data)
		if err != nil {
			return err
		}
	}
	format(ormFilePath)
	return nil
}

func packagePath(pkg string) (string, error) {
	for _, gopath := range filepath.SplitList(os.Getenv("GOPATH")) {
		pkgPath := filepath.Join(gopath, "src", pkg)
		f, err := os.Stat(pkgPath)
		if err == nil && f.IsDir() {
			return pkgPath, nil
		}
	}
	return "", fmt.Errorf("package path was not found: %s", pkg)
}

func format(path string) {
	_, err := exec.Command("goimports", "-w", path).CombinedOutput()
	if err != nil {
		log.Printf("Failed formatting package: %s", err)
	}
}
